# NOTE: This patch file is generated automatically and is not used, it is only for documentation. The driver is actually patched using [patchright_driver_patch](https://github.com/Kaliiiiiiiiii-Vinyzu/patchright/blob/main/patchright_driver_patch.js), see [the workflow](https://github.com/Kaliiiiiiiiii-Vinyzu/patchright/blob/main/.github/workflows/patchright_workflow.yml)
Binary files playwright/.git/index and patchright/.git/index differ
diff -ruN playwright/babel.config.json patchright/babel.config.json
--- playwright/babel.config.json	2025-06-14 21:50:45.282205800 +0200
+++ patchright/babel.config.json	2025-06-14 21:53:14.120912300 +0200
@@ -3,15 +3,19 @@
     "setPublicClassFields": true
   },
   "plugins": [
-    ["@babel/plugin-transform-typescript", { "allowDeclareFields": true } ],
+    [
+      "@babel/plugin-transform-typescript",
+      {
+        "allowDeclareFields": true
+      }
+    ],
     "@babel/plugin-transform-export-namespace-from",
     "@babel/plugin-transform-class-properties",
     "@babel/plugin-transform-logical-assignment-operators",
     "@babel/plugin-transform-nullish-coalescing-operator",
-    "@babel/plugin-transform-optional-chaining",
     "@babel/plugin-transform-modules-commonjs"
   ],
   "ignore": [
     "**/*.d.ts"
   ]
-}
+}
\ No newline at end of file
diff -ruN playwright/packages/playwright-core/src/server/bidi/bidiPage.ts patchright/packages/playwright-core/src/server/bidi/bidiPage.ts
--- playwright/packages/playwright-core/src/server/bidi/bidiPage.ts	2025-06-14 21:50:46.338103300 +0200
+++ patchright/packages/playwright-core/src/server/bidi/bidiPage.ts	2025-06-14 21:53:22.274914300 +0200
@@ -377,7 +377,7 @@
       this._initScriptIds.push(script);
   }
 
-  async removeNonInternalInitScripts() {
+  async removeInitScripts() {
     const promises = this._initScriptIds.map(script => this._session.send('script.removePreloadScript', { script }));
     this._initScriptIds = [];
     await Promise.all(promises);
diff -ruN playwright/packages/playwright-core/src/server/browserContext.ts patchright/packages/playwright-core/src/server/browserContext.ts
--- playwright/packages/playwright-core/src/server/browserContext.ts	2025-06-14 21:50:46.339602900 +0200
+++ patchright/packages/playwright-core/src/server/browserContext.ts	2025-06-14 21:53:22.269912300 +0200
@@ -149,7 +149,7 @@
     if (debugMode() === 'console')
       await this.extendInjectedScript(consoleApiSource.source);
     if (this._options.serviceWorkers === 'block')
-      await this.addInitScript(`\nif (navigator.serviceWorker) navigator.serviceWorker.register = async () => { console.warn('Service Worker registration blocked by Playwright'); };\n`);
+      await this.addInitScript(`navigator.serviceWorker.register = async () => { };`);
 
     if (this._options.permissions)
       await this.grantPermissions(this._options.permissions);
@@ -332,16 +332,15 @@
     }
     const binding = new PageBinding(name, playwrightBinding, needsHandle);
     this._pageBindings.set(name, binding);
-    await this.doAddInitScript(binding.initScript);
-    const frames = this.pages().map(page => page.frames()).flat();
-    await Promise.all(frames.map(frame => frame.evaluateExpression(binding.initScript.source).catch(e => {})));
+    await this.doExposeBinding(binding);
   }
 
   async _removeExposedBindings() {
-    for (const [key, binding] of this._pageBindings) {
-      if (!binding.internal)
+    for (const key of this._pageBindings.keys()) {
+      if (!key.startsWith('__pw'))
         this._pageBindings.delete(key);
     }
+    await this.doRemoveExposedBindings();
   }
 
   async grantPermissions(permissions: string[], origin?: string) {
@@ -430,8 +429,8 @@
   }
 
   async _removeInitScripts(): Promise<void> {
-    this.initScripts = this.initScripts.filter(script => script.internal);
-    await this.doRemoveNonInternalInitScripts();
+    this.initScripts.splice(0, this.initScripts.length);
+    await this.doRemoveInitScripts();
   }
 
   async setRequestInterceptor(handler: network.RouteHandler | undefined): Promise<void> {
diff -ruN playwright/packages/playwright-core/src/server/chromium/chromiumSwitches.ts patchright/packages/playwright-core/src/server/chromium/chromiumSwitches.ts
--- playwright/packages/playwright-core/src/server/chromium/chromiumSwitches.ts	2025-06-14 21:50:46.179602500 +0200
+++ patchright/packages/playwright-core/src/server/chromium/chromiumSwitches.ts	2025-06-14 21:53:22.275911900 +0200
@@ -58,27 +58,16 @@
   '--disable-field-trial-config', // https://source.chromium.org/chromium/chromium/src/+/main:testing/variations/README.md
   '--disable-background-networking',
   '--disable-background-timer-throttling',
-  '--disable-backgrounding-occluded-windows',
-  '--disable-back-forward-cache', // Avoids surprises like main request not being intercepted during page.goBack().
-  '--disable-breakpad',
-  '--disable-client-side-phishing-detection',
-  '--disable-component-extensions-with-background-pages',
-  '--disable-component-update', // Avoids unneeded network activity after startup.
+  '--disable-backgrounding-occluded-windows', // Avoids surprises like main request not being intercepted during page.goBack().
+  '--disable-breakpad', // Avoids unneeded network activity after startup.
   '--no-default-browser-check',
-  '--disable-default-apps',
   '--disable-dev-shm-usage',
-  '--disable-extensions',
   '--disable-features=' + disabledFeatures.join(','),
-  '--allow-pre-commit-input',
   '--disable-hang-monitor',
-  '--disable-ipc-flooding-protection',
-  '--disable-popup-blocking',
   '--disable-prompt-on-repost',
   '--disable-renderer-backgrounding',
   '--force-color-profile=srgb',
-  '--metrics-recording-only',
   '--no-first-run',
-  '--enable-automation',
   '--password-store=basic',
   '--use-mock-keychain',
   // See https://chromium-review.googlesource.com/c/chromium/src/+/2436773
@@ -86,6 +75,5 @@
   '--export-tagged-pdf',
   // https://chromium-review.googlesource.com/c/chromium/src/+/4853540
   '--disable-search-engine-choice-screen',
-  // https://issues.chromium.org/41491762
-  '--unsafely-disable-devtools-self-xss-warnings',
+  '--disable-blink-features=AutomationControlled'
 ];
diff -ruN playwright/packages/playwright-core/src/server/chromium/crBrowser.ts patchright/packages/playwright-core/src/server/chromium/crBrowser.ts
--- playwright/packages/playwright-core/src/server/chromium/crBrowser.ts	2025-06-14 21:50:46.182102200 +0200
+++ patchright/packages/playwright-core/src/server/chromium/crBrowser.ts	2025-06-14 21:53:22.276414100 +0200
@@ -494,11 +494,6 @@
       await (page._delegate as CRPage).addInitScript(initScript);
   }
 
-  async doRemoveNonInternalInitScripts() {
-    for (const page of this.pages())
-      await (page._delegate as CRPage).removeNonInternalInitScripts();
-  }
-
   async doUpdateRequestInterception(): Promise<void> {
     for (const page of this.pages())
       await (page._delegate as CRPage).updateRequestInterception();
@@ -598,4 +593,16 @@
     const rootSession = await this._browser._clientRootSession();
     return rootSession.attachToTarget(targetId);
   }
+
+  async doRemoveInitScripts() {
+    for (const page of this.pages()) await (page._delegate as CRPage).removeInitScripts();
+  }
+
+  async doExposeBinding(binding: PageBinding) {
+    for (const page of this.pages()) await (page._delegate as CRPage).exposeBinding(binding);
+  }
+
+  async doRemoveExposedBindings() {
+    for (const page of this.pages()) await (page._delegate as CRPage).removeExposedBindings();
+  }
 }
diff -ruN playwright/packages/playwright-core/src/server/chromium/crDevTools.ts patchright/packages/playwright-core/src/server/chromium/crDevTools.ts
--- playwright/packages/playwright-core/src/server/chromium/crDevTools.ts	2025-06-14 21:50:46.180102700 +0200
+++ patchright/packages/playwright-core/src/server/chromium/crDevTools.ts	2025-06-14 21:53:22.277414300 +0200
@@ -67,7 +67,6 @@
       }).catch(e => null);
     });
     Promise.all([
-      session.send('Runtime.enable'),
       session.send('Runtime.addBinding', { name: kBindingName }),
       session.send('Page.enable'),
       session.send('Page.addScriptToEvaluateOnNewDocument', { source: `
diff -ruN playwright/packages/playwright-core/src/server/chromium/crNetworkManager.ts patchright/packages/playwright-core/src/server/chromium/crNetworkManager.ts
--- playwright/packages/playwright-core/src/server/chromium/crNetworkManager.ts	2025-06-14 21:50:46.180605200 +0200
+++ patchright/packages/playwright-core/src/server/chromium/crNetworkManager.ts	2025-06-14 21:53:22.278413700 +0200
@@ -1,3 +1,5 @@
+// undetected-undetected_playwright-patch - custom imports
+import crypto from 'crypto';
 /**
  * Copyright 2017 Google Inc. All rights reserved.
  * Modifications copyright (c) Microsoft Corporation.
@@ -156,7 +158,7 @@
     const enabled = this._protocolRequestInterceptionEnabled;
     if (initial && !enabled)
       return;
-    const cachePromise = info.session.send('Network.setCacheDisabled', { cacheDisabled: enabled });
+    const cachePromise = info.session.send('Network.setCacheDisabled', { cacheDisabled: false });
     let fetchPromise = Promise.resolve<any>(undefined);
     if (!info.workerFrame) {
       if (enabled)
@@ -238,6 +240,7 @@
   }
 
   _onRequestPaused(sessionInfo: SessionInfo, event: Protocol.Fetch.requestPausedPayload) {
+    if (this._alreadyTrackedNetworkIds.has(event.networkId)) return;
     if (!event.networkId) {
       // Fetch without networkId means that request was not recognized by inspector, and
       // it will never receive Network.requestWillBeSent. Continue the request to not affect it.
@@ -276,6 +279,7 @@
   }
 
   _onRequest(requestWillBeSentSessionInfo: SessionInfo, requestWillBeSentEvent: Protocol.Network.requestWillBeSentPayload, requestPausedSessionInfo: SessionInfo | undefined, requestPausedEvent: Protocol.Fetch.requestPausedPayload | undefined) {
+    if (this._alreadyTrackedNetworkIds.has(requestWillBeSentEvent.initiator.requestId)) return;
     if (requestWillBeSentEvent.request.url.startsWith('data:'))
       return;
     let redirectedFrom: InterceptableRequest | null = null;
@@ -342,7 +346,7 @@
         headersOverride = redirectedFrom?._originalRequestRoute?._alreadyContinuedParams?.headers;
         requestPausedSessionInfo!.session._sendMayFail('Fetch.continueRequest', { requestId: requestPausedEvent.requestId, headers: headersOverride });
       } else {
-        route = new RouteImpl(requestPausedSessionInfo!.session, requestPausedEvent.requestId);
+        route = new RouteImpl(requestPausedSessionInfo!.session, requestPausedEvent.requestId, this._page, requestPausedEvent.networkId, this);
       }
     }
     const isNavigationRequest = requestWillBeSentEvent.requestId === requestWillBeSentEvent.loaderId && requestWillBeSentEvent.type === 'Document';
@@ -547,6 +551,8 @@
     if (request.session !== sessionInfo.session && !sessionInfo.isMain && request._documentId === request._requestId)
       request.session = sessionInfo.session;
   }
+
+  _alreadyTrackedNetworkIds: Set<string> = new Set();
 }
 
 class InterceptableRequest {
@@ -606,32 +612,82 @@
   _alreadyContinuedParams: Protocol.Fetch.continueRequestParameters | undefined;
   _fulfilled: boolean = false;
 
-  constructor(session: CRSession, interceptionId: string) {
+  constructor(session: CRSession, interceptionId: string, page: Page, networkId, sessionManager) {
+    this._sessionManager = void 0;
+    this._networkId = void 0;
+    this._page = void 0;
     this._session = session;
     this._interceptionId = interceptionId;
+    this._page = page;
+    this._networkId = networkId;
+    this._sessionManager = sessionManager;
+    eventsHelper.addEventListener(this._session, 'Fetch.requestPaused', async e => await this._networkRequestIntercepted(e));
   }
 
   async continue(overrides: types.NormalizedContinueOverrides): Promise<void> {
     this._alreadyContinuedParams = {
-      requestId: this._interceptionId!,
+      requestId: this._interceptionId,
       url: overrides.url,
       headers: overrides.headers,
       method: overrides.method,
-      postData: overrides.postData ? overrides.postData.toString('base64') : undefined
+      postData: overrides.postData ? overrides.postData.toString('base64') : undefined,
     };
-    await catchDisallowedErrors(async () => {
-      await this._session.send('Fetch.continueRequest', this._alreadyContinuedParams);
-    });
+    if (overrides.url && (overrides.url === 'http://patchright-init-script-inject.internal/' || overrides.url === 'https://patchright-init-script-inject.internal/')) {
+      await catchDisallowedErrors(async () => {
+        this._sessionManager._alreadyTrackedNetworkIds.add(this._networkId);
+        this._session.send('Fetch.continueRequest', { requestId: this._interceptionId, interceptResponse: true });
+      }) ;
+    } else {
+      await catchDisallowedErrors(async () => {
+        await this._session.send('Fetch.continueRequest', this._alreadyContinuedParams);
+      });
+    }
   }
 
   async fulfill(response: types.NormalizedFulfillResponse) {
+    const isTextHtml = response.resourceType === 'Document' || response.headers.some(header => header.name === 'content-type' && header.value.includes('text/html'));
+    var allInjections = [...this._page._delegate._mainFrameSession._evaluateOnNewDocumentScripts];
+        for (const binding of this._page._delegate._browserContext._pageBindings.values()) {
+          if (!allInjections.includes(binding)) allInjections.push(binding);
+        }
+    if (isTextHtml && allInjections.length) {
+      // I Chatted so hard for this Code
+      let scriptNonce = crypto.randomBytes(22).toString('hex');
+      for (let i = 0; i < response.headers.length; i++) {
+        if (response.headers[i].name === 'content-security-policy' || response.headers[i].name === 'content-security-policy-report-only') {
+          // Search for an existing script-src nonce that we can hijack
+          let cspValue = response.headers[i].value;
+          const nonceRegex = /script-src[^;]*'nonce-([\w-]+)'/;
+          const nonceMatch = cspValue.match(nonceRegex);
+          if (nonceMatch) {
+            scriptNonce = nonceMatch[1];
+          } else {
+            // Add the new nonce value to the script-src directive
+            const scriptSrcRegex = /(script-src[^;]*)(;|$)/;
+            const newCspValue = cspValue.replace(scriptSrcRegex, `$1 'nonce-${scriptNonce}'$2`);
+            response.headers[i].value = newCspValue;
+          }
+          break;
+        }
+      }
+      let injectionHTML = "";
+      allInjections.forEach((script) => {
+        let scriptId = crypto.randomBytes(22).toString('hex');
+        injectionHTML += `<script class="${this._page._delegate.initScriptTag}" nonce="${scriptNonce}" type="text/javascript">document.getElementById("${scriptId}")?.remove();${script.source}</script>`;
+      });
+      if (response.isBase64) {
+        response.isBase64 = false;
+        response.body = injectionHTML + Buffer.from(response.body, 'base64').toString('utf-8');
+      } else {
+        response.body = injectionHTML + response.body;
+      }
+    }
     this._fulfilled = true;
     const body = response.isBase64 ? response.body : Buffer.from(response.body).toString('base64');
-
     const responseHeaders = splitSetCookieHeader(response.headers);
     await catchDisallowedErrors(async () => {
       await this._session.send('Fetch.fulfillRequest', {
-        requestId: this._interceptionId!,
+        requestId: response.interceptionId ? response.interceptionId : this._interceptionId,
         responseCode: response.status,
         responsePhrase: network.statusText(response.status),
         responseHeaders,
@@ -650,6 +706,33 @@
       });
     });
   }
+
+  async _networkRequestIntercepted(event) {
+    if (event.resourceType !== 'Document') {
+      /*await catchDisallowedErrors(async () => {
+        await this._session.send('Fetch.continueRequest', { requestId: event.requestId });
+      });*/
+      return;
+    }
+    if (this._networkId != event.networkId || !this._sessionManager._alreadyTrackedNetworkIds.has(event.networkId)) return;
+    try {
+      if (event.responseStatusCode >= 301 && event.responseStatusCode <= 308  || (event.redirectedRequestId && !event.responseStatusCode)) {
+        await this._session.send('Fetch.continueRequest', { requestId: event.requestId, interceptResponse: true });
+      } else {
+        const responseBody = await this._session.send('Fetch.getResponseBody', { requestId: event.requestId });
+        await this.fulfill({
+          headers: event.responseHeaders,
+          isBase64: true,
+          body: responseBody.body,
+          status: event.responseStatusCode,
+          interceptionId: event.requestId,
+          resourceType: event.resourceType,
+        })
+      }
+    } catch (error) {
+      await this._session._sendMayFail('Fetch.continueRequest', { requestId: event.requestId });
+    }
+  }
 }
 
 // In certain cases, protocol will return error if the request was already canceled
diff -ruN playwright/packages/playwright-core/src/server/chromium/crPage.ts patchright/packages/playwright-core/src/server/chromium/crPage.ts
--- playwright/packages/playwright-core/src/server/chromium/crPage.ts	2025-06-14 21:50:46.181604700 +0200
+++ patchright/packages/playwright-core/src/server/chromium/crPage.ts	2025-06-14 21:53:22.278914300 +0200
@@ -1,3 +1,5 @@
+// undetected-undetected_playwright-patch - custom imports
+import crypto from 'crypto';
 /**
  * Copyright 2017 Google Inc. All rights reserved.
  * Modifications copyright (c) Microsoft Corporation.
@@ -101,7 +103,8 @@
     this.updateOffline();
     this.updateExtraHTTPHeaders();
     this.updateHttpCredentials();
-    this.updateRequestInterception();
+    this._networkManager.setRequestInterception(true);
+    this.initScriptTag = crypto.randomBytes(20).toString('hex');
     this._mainFrameSession = new FrameSession(this, client, targetId, null);
     this._sessions.set(targetId, this._mainFrameSession);
     if (opener && !browserContext._options.noDefaultViewport) {
@@ -231,10 +234,11 @@
   }
 
   async addInitScript(initScript: InitScript, world: types.World = 'main'): Promise<void> {
+    this._page.initScripts.push(initScript);
     await this._forAllFrameSessions(frame => frame._evaluateOnNewDocument(initScript, world));
   }
 
-  async removeNonInternalInitScripts() {
+  async removeInitScripts() {
     await this._forAllFrameSessions(frame => frame._removeEvaluatesOnNewDocument());
   }
 
@@ -365,6 +369,15 @@
   shouldToggleStyleSheetToSyncAnimations(): boolean {
     return false;
   }
+
+  async exposeBinding(binding) {
+    await this._forAllFrameSessions(frame => frame._initBinding(binding));
+    await Promise.all(this._page.frames().map(frame => frame.evaluateExpression(binding.source).catch(e => {})));
+  }
+
+  async removeExposedBindings() {
+    await this._forAllFrameSessions(frame => frame._removeExposedBindings());
+  }
 }
 
 class FrameSession {
@@ -479,19 +492,6 @@
           this._handleFrameTree(frameTree);
           this._addRendererListeners();
         }
-
-        const localFrames = this._isMainFrame() ? this._page.frames() : [this._page._frameManager.frame(this._targetId)!];
-        for (const frame of localFrames) {
-          // Note: frames might be removed before we send these.
-          this._client._sendMayFail('Page.createIsolatedWorld', {
-            frameId: frame._id,
-            grantUniveralAccess: true,
-            worldName: UTILITY_WORLD_NAME,
-          });
-          for (const initScript of this._crPage._page.allInitScripts())
-            frame.evaluateExpression(initScript.source).catch(e => {});
-        }
-
         const isInitialEmptyPage = this._isMainFrame() && this._page.mainFrame().url() === ':';
         if (isInitialEmptyPage) {
           // Ignore lifecycle events, worlds and bindings for the initial empty page. It is never the final page
@@ -501,14 +501,20 @@
             this._eventListeners.push(eventsHelper.addEventListener(this._client, 'Page.lifecycleEvent', event => this._onLifecycleEvent(event)));
           });
         } else {
+          const localFrames = this._isMainFrame() ? this._page.frames() : [this._page._frameManager.frame(this._targetId)!];
+          for (const frame of localFrames) {
+            this._page._frameManager.frame(frame._id)._context("utility");
+            for (const binding of this._crPage._browserContext._pageBindings.values())
+              frame.evaluateExpression(binding.source).catch(e => {});
+            for (const source of this._crPage._browserContext.initScripts)
+              frame.evaluateExpression(source).catch(e => {});
+          }
           this._firstNonInitialNavigationCommittedFulfill();
           this._eventListeners.push(eventsHelper.addEventListener(this._client, 'Page.lifecycleEvent', event => this._onLifecycleEvent(event)));
         }
       }),
       this._client.send('Log.enable', {}),
       lifecycleEventsEnabled = this._client.send('Page.setLifecycleEventsEnabled', { enabled: true }),
-      this._client.send('Runtime.enable', {}),
-      this._client.send('Runtime.addBinding', { name: PageBinding.kPlaywrightBinding }),
       this._client.send('Page.addScriptToEvaluateOnNewDocument', {
         source: '',
         worldName: UTILITY_WORLD_NAME,
@@ -541,14 +547,16 @@
       promises.push(this._updateGeolocation(true));
       promises.push(this._updateEmulateMedia());
       promises.push(this._updateFileChooserInterception(true));
-      for (const initScript of this._crPage._page.allInitScripts())
-        promises.push(this._evaluateOnNewDocument(initScript, 'main'));
+      for (const binding of this._crPage._page.allBindings()) promises.push(this._initBinding(binding));
+      for (const initScript of this._crPage._browserContext.initScripts) promises.push(this._evaluateOnNewDocument(initScript, 'main'));
+      for (const initScript of this._crPage._page.initScripts) promises.push(this._evaluateOnNewDocument(initScript, 'main'));
       if (screencastOptions)
         promises.push(this._startVideoRecording(screencastOptions));
     }
-    promises.push(this._client.send('Runtime.runIfWaitingForDebugger'));
+    if (!(this._crPage._page._pageBindings.size || this._crPage._browserContext._pageBindings.size)) promises.push(this._client.send('Runtime.runIfWaitingForDebugger'));
     promises.push(this._firstNonInitialNavigationCommittedPromise);
     await Promise.all(promises);
+    if (this._crPage._page._pageBindings.size || this._crPage._browserContext._pageBindings.size) await this._client.send('Runtime.runIfWaitingForDebugger');
   }
 
   dispose() {
@@ -565,18 +573,31 @@
 
   async _navigate(frame: frames.Frame, url: string, referrer: string | undefined): Promise<frames.GotoResult> {
     const response = await this._client.send('Page.navigate', { url, referrer, frameId: frame._id, referrerPolicy: 'unsafeUrl' });
+    this._client._sendMayFail('Page.waitForDebugger');
     if (response.errorText)
       throw new frames.NavigationAbortedError(response.loaderId, `${response.errorText} at ${url}`);
     return { newDocumentId: response.loaderId };
   }
 
-  _onLifecycleEvent(event: Protocol.Page.lifecycleEventPayload) {
+  async _onLifecycleEvent(event: Protocol.Page.lifecycleEventPayload) {
     if (this._eventBelongsToStaleFrame(event.frameId))
       return;
     if (event.name === 'load')
       this._page._frameManager.frameLifecycleEvent(event.frameId, 'load');
     else if (event.name === 'DOMContentLoaded')
       this._page._frameManager.frameLifecycleEvent(event.frameId, 'domcontentloaded');
+    await this._client._sendMayFail('Runtime.runIfWaitingForDebugger');
+      var document = await this._client._sendMayFail("DOM.getDocument");
+      if (!document) return
+      var query = await this._client._sendMayFail("DOM.querySelectorAll", {
+        nodeId: document.root.nodeId,
+        selector: "[class=" + this._crPage.initScriptTag + "]"
+      });
+      if (!query) return
+      for (const nodeId of query.nodeIds) await this._client._sendMayFail("DOM.removeNode", { nodeId: nodeId });
+      await this._client._sendMayFail('Runtime.runIfWaitingForDebugger');
+      // ensuring execution context
+      try { await this._page._frameManager.frame(this._targetId)._context("utility") } catch { };
   }
 
   _handleFrameTree(frameTree: Protocol.Page.FrameTree) {
@@ -623,12 +644,24 @@
     this._page._frameManager.frameAttached(frameId, parentFrameId);
   }
 
-  _onFrameNavigated(framePayload: Protocol.Page.Frame, initial: boolean) {
+  async _onFrameNavigated(framePayload: Protocol.Page.Frame, initial: boolean) {
     if (this._eventBelongsToStaleFrame(framePayload.id))
       return;
     this._page._frameManager.frameCommittedNewDocumentNavigation(framePayload.id, framePayload.url + (framePayload.urlFragment || ''), framePayload.name || '', framePayload.loaderId, initial);
     if (!initial)
       this._firstNonInitialNavigationCommittedFulfill();
+    await this._client._sendMayFail('Runtime.runIfWaitingForDebugger');
+      var document = await this._client._sendMayFail("DOM.getDocument");
+      if (!document) return
+      var query = await this._client._sendMayFail("DOM.querySelectorAll", {
+        nodeId: document.root.nodeId,
+        selector: "[class=" + this._crPage.initScriptTag + "]"
+      });
+      if (!query) return
+      for (const nodeId of query.nodeIds) await this._client._sendMayFail("DOM.removeNode", { nodeId: nodeId });
+      await this._client._sendMayFail('Runtime.runIfWaitingForDebugger');
+      // ensuring execution context
+      try { await this._page._frameManager.frame(this._targetId)._context("utility") } catch { };
   }
 
   _onFrameRequestedNavigation(payload: Protocol.Page.frameRequestedNavigationPayload) {
@@ -665,19 +698,24 @@
   }
 
   _onExecutionContextCreated(contextPayload: Protocol.Runtime.ExecutionContextDescription) {
+    for (const name of this._exposedBindingNames) this._client._sendMayFail('Runtime.addBinding', { name: name, executionContextId: contextPayload.id });
     const frame = contextPayload.auxData ? this._page._frameManager.frame(contextPayload.auxData.frameId) : null;
+    if (contextPayload.auxData.type == "worker") throw new Error("ExecutionContext is worker");
     if (!frame || this._eventBelongsToStaleFrame(frame._id))
       return;
     const delegate = new CRExecutionContext(this._client, contextPayload);
-    let worldName: types.World|null = null;
-    if (contextPayload.auxData && !!contextPayload.auxData.isDefault)
-      worldName = 'main';
-    else if (contextPayload.name === UTILITY_WORLD_NAME)
-      worldName = 'utility';
+    let worldName = contextPayload.name;
     const context = new dom.FrameExecutionContext(delegate, frame, worldName);
     if (worldName)
       frame._contextCreated(worldName, context);
     this._contextIdToContext.set(contextPayload.id, context);
+    for (const source of this._exposedBindingScripts) {
+      this._client._sendMayFail("Runtime.evaluate", {
+        expression: source,
+        contextId: contextPayload.id,
+        awaitPromise: true,
+      })
+    }
   }
 
   _onExecutionContextDestroyed(executionContextId: number) {
@@ -693,7 +731,7 @@
       this._onExecutionContextDestroyed(contextId);
   }
 
-  _onAttachedToTarget(event: Protocol.Target.attachedToTargetPayload) {
+  async _onAttachedToTarget(event: Protocol.Target.attachedToTargetPayload) {
     const session = this._client.createChildSession(event.sessionId);
 
     if (event.targetInfo.type === 'iframe') {
@@ -725,8 +763,17 @@
     session.once('Runtime.executionContextCreated', async event => {
       worker._createExecutionContext(new CRExecutionContext(session, event.context));
     });
+    var globalThis = await session._sendMayFail('Runtime.evaluate', {
+      expression: "globalThis",
+      serializationOptions: { serialization: "idOnly" }
+
+    });
+    if (globalThis && globalThis.result) {
+      var globalThisObjId = globalThis.result.objectId;
+      var executionContextId = parseInt(globalThisObjId.split('.')[1], 10);
+      worker._createExecutionContext(new CRExecutionContext(session, { id: executionContextId }));
+    }
     // This might fail if the target is closed before we initialize.
-    session._sendMayFail('Runtime.enable');
     // TODO: attribute workers to the right frame.
     this._crPage._networkManager.addSession(session, this._page._frameManager.frame(this._targetId) ?? undefined).catch(() => {});
     session._sendMayFail('Runtime.runIfWaitingForDebugger');
@@ -805,8 +852,8 @@
     const pageOrError = await this._crPage._page.waitForInitializedOrError();
     if (!(pageOrError instanceof Error)) {
       const context = this._contextIdToContext.get(event.executionContextId);
-      if (context)
-        await this._page._onBindingCalled(event.payload, context);
+      if (context) await this._page._onBindingCalled(event.payload, context);
+      else await this._page._onBindingCalled(event.payload, (await this._page.mainFrame()._mainContext())) // This might be a bit sketchy but it works for now
     }
   }
 
@@ -1052,16 +1099,11 @@
   }
 
   async _evaluateOnNewDocument(initScript: InitScript, world: types.World): Promise<void> {
-    const worldName = world === 'utility' ? UTILITY_WORLD_NAME : undefined;
-    const { identifier } = await this._client.send('Page.addScriptToEvaluateOnNewDocument', { source: initScript.source, worldName });
-    if (!initScript.internal)
-      this._evaluateOnNewDocumentIdentifiers.push(identifier);
+    this._evaluateOnNewDocumentScripts.push(initScript)
   }
 
   async _removeEvaluatesOnNewDocument(): Promise<void> {
-    const identifiers = this._evaluateOnNewDocumentIdentifiers;
-    this._evaluateOnNewDocumentIdentifiers = [];
-    await Promise.all(identifiers.map(identifier => this._client.send('Page.removeScriptToEvaluateOnNewDocument', { identifier })));
+    this._evaluateOnNewDocumentScripts = [];
   }
 
   async _getContentFrame(handle: dom.ElementHandle): Promise<frames.Frame | null> {
@@ -1168,6 +1210,47 @@
       throw new Error(dom.kUnableToAdoptErrorMessage);
     return createHandle(to, result.object).asElement()!;
   }
+
+  _exposedBindingNames: string[] = [];
+  _evaluateOnNewDocumentScripts: string[] = [];
+  _parsedExecutionContextIds: number[] = [];
+  _exposedBindingScripts: string[] = [];
+
+  async _initBinding(binding = PageBinding) {
+    var result = await this._client._sendMayFail('Page.createIsolatedWorld', {
+      frameId: this._targetId, grantUniveralAccess: true, worldName: "utility"
+    });
+    if (!result) return
+    var isolatedContextId = result.executionContextId
+
+    var globalThis = await this._client._sendMayFail('Runtime.evaluate', {
+      expression: "globalThis",
+      serializationOptions: { serialization: "idOnly" }
+    });
+    if (!globalThis) return
+    var globalThisObjId = globalThis["result"]['objectId']
+    var mainContextId = parseInt(globalThisObjId.split('.')[1], 10);
+
+    await Promise.all([
+      this._client._sendMayFail('Runtime.addBinding', { name: binding.name }),
+      this._client._sendMayFail('Runtime.addBinding', { name: binding.name, executionContextId: mainContextId }),
+      this._client._sendMayFail('Runtime.addBinding', { name: binding.name, executionContextId: isolatedContextId }),
+      // this._client._sendMayFail("Runtime.evaluate", { expression: binding.source, contextId: mainContextId, awaitPromise: true })
+    ]);
+    this._exposedBindingNames.push(binding.name);
+    this._exposedBindingScripts.push(binding.source);
+    await this._crPage.addInitScript(binding.source);
+    //this._client._sendMayFail('Runtime.runIfWaitingForDebugger')
+  }
+
+  async _removeExposedBindings() {
+    const toRetain: string[] = [];
+    const toRemove: string[] = [];
+    for (const name of this._exposedBindingNames)
+      (name.startsWith('__pw_') ? toRetain : toRemove).push(name);
+    this._exposedBindingNames = toRetain;
+    await Promise.all(toRemove.map(name => this._client.send('Runtime.removeBinding', { name })));
+  }
 }
 
 async function emulateLocale(session: CRSession, locale: string) {
diff -ruN playwright/packages/playwright-core/src/server/chromium/crServiceWorker.ts patchright/packages/playwright-core/src/server/chromium/crServiceWorker.ts
--- playwright/packages/playwright-core/src/server/chromium/crServiceWorker.ts	2025-06-14 21:50:46.182604700 +0200
+++ patchright/packages/playwright-core/src/server/chromium/crServiceWorker.ts	2025-06-14 21:53:22.279912600 +0200
@@ -44,8 +44,6 @@
       this.updateOffline();
       this._networkManager.addSession(session, undefined, true /* isMain */).catch(() => {});
     }
-
-    session.send('Runtime.enable', {}).catch(e => { });
     session.send('Runtime.runIfWaitingForDebugger').catch(e => { });
     session.on('Inspector.targetReloadedAfterCrash', () => {
       // Resume service worker after restart.
diff -ruN playwright/packages/playwright-core/src/server/clock.ts patchright/packages/playwright-core/src/server/clock.ts
--- playwright/packages/playwright-core/src/server/clock.ts	2025-06-14 21:50:46.340602400 +0200
+++ patchright/packages/playwright-core/src/server/clock.ts	2025-06-14 21:53:22.270913100 +0200
@@ -92,6 +92,14 @@
   }
 
   private async _evaluateInFrames(script: string) {
+    // Dont ask me why this works
+    await Promise.all(this._browserContext.pages().map(async page => {
+      await Promise.all(page.frames().map(async frame => {
+        try {
+          await frame.evaluateExpression("");
+        } catch (e) {}
+      }));
+    }));
     await this._browserContext.safeNonStallingEvaluateInAllFrames(script, 'main', { throwOnJSErrors: true });
   }
 }
diff -ruN playwright/packages/playwright-core/src/server/dispatchers/frameDispatcher.ts patchright/packages/playwright-core/src/server/dispatchers/frameDispatcher.ts
--- playwright/packages/playwright-core/src/server/dispatchers/frameDispatcher.ts	2025-06-14 21:50:45.851241500 +0200
+++ patchright/packages/playwright-core/src/server/dispatchers/frameDispatcher.ts	2025-06-14 21:53:22.280413900 +0200
@@ -84,11 +84,15 @@
   }
 
   async evaluateExpression(params: channels.FrameEvaluateExpressionParams, metadata: CallMetadata): Promise<channels.FrameEvaluateExpressionResult> {
-    return { value: serializeResult(await this._frame.evaluateExpression(params.expression, { isFunction: params.isFunction }, parseArgument(params.arg))) };
+    return { value: serializeResult(await this._frame.evaluateExpression(params.expression, { isFunction: params.isFunction,
+      world: params.isolatedContext ? 'utility': 'main'
+    }, parseArgument(params.arg))) };
   }
 
   async evaluateExpressionHandle(params: channels.FrameEvaluateExpressionHandleParams, metadata: CallMetadata): Promise<channels.FrameEvaluateExpressionHandleResult> {
-    return { handle: ElementHandleDispatcher.fromJSHandle(this, await this._frame.evaluateExpressionHandle(params.expression, { isFunction: params.isFunction }, parseArgument(params.arg))) };
+    return { handle: ElementHandleDispatcher.fromJSHandle(this, await this._frame.evaluateExpressionHandle(params.expression, { isFunction: params.isFunction,
+      world: params.isolatedContext ? 'utility': 'main'
+    }, parseArgument(params.arg))) };
   }
 
   async waitForSelector(params: channels.FrameWaitForSelectorParams, metadata: CallMetadata): Promise<channels.FrameWaitForSelectorResult> {
diff -ruN playwright/packages/playwright-core/src/server/dispatchers/jsHandleDispatcher.ts patchright/packages/playwright-core/src/server/dispatchers/jsHandleDispatcher.ts
--- playwright/packages/playwright-core/src/server/dispatchers/jsHandleDispatcher.ts	2025-06-14 21:50:45.852241200 +0200
+++ patchright/packages/playwright-core/src/server/dispatchers/jsHandleDispatcher.ts	2025-06-14 21:53:22.281413800 +0200
@@ -39,11 +39,11 @@
   }
 
   async evaluateExpression(params: channels.JSHandleEvaluateExpressionParams): Promise<channels.JSHandleEvaluateExpressionResult> {
-    return { value: serializeResult(await this._object.evaluateExpression(params.expression, { isFunction: params.isFunction }, parseArgument(params.arg))) };
+    return { value: serializeResult(await this._object.evaluateExpression(params.expression, { isFunction: params.isFunction }, parseArgument(params.arg), params.isolatedContext)) };
   }
 
   async evaluateExpressionHandle(params: channels.JSHandleEvaluateExpressionHandleParams): Promise<channels.JSHandleEvaluateExpressionHandleResult> {
-    const jsHandle = await this._object.evaluateExpressionHandle(params.expression, { isFunction: params.isFunction }, parseArgument(params.arg));
+    const jsHandle = await this._object.evaluateExpressionHandle(params.expression, { isFunction: params.isFunction }, parseArgument(params.arg), params.isolatedContext);
     return { handle: ElementHandleDispatcher.fromJSHandle(this.parentScope(), jsHandle) };
   }
 
diff -ruN playwright/packages/playwright-core/src/server/dispatchers/pageDispatcher.ts patchright/packages/playwright-core/src/server/dispatchers/pageDispatcher.ts
--- playwright/packages/playwright-core/src/server/dispatchers/pageDispatcher.ts	2025-06-14 21:50:45.850741300 +0200
+++ patchright/packages/playwright-core/src/server/dispatchers/pageDispatcher.ts	2025-06-14 21:53:22.281914700 +0200
@@ -353,11 +353,11 @@
   }
 
   async evaluateExpression(params: channels.WorkerEvaluateExpressionParams, metadata: CallMetadata): Promise<channels.WorkerEvaluateExpressionResult> {
-    return { value: serializeResult(await this._object.evaluateExpression(params.expression, params.isFunction, parseArgument(params.arg))) };
+    return { value: serializeResult(await this._object.evaluateExpression(params.expression, params.isFunction, parseArgument(params.arg), params.isolatedContext)) };
   }
 
   async evaluateExpressionHandle(params: channels.WorkerEvaluateExpressionHandleParams, metadata: CallMetadata): Promise<channels.WorkerEvaluateExpressionHandleResult> {
-    return { handle: ElementHandleDispatcher.fromJSHandle(this, await this._object.evaluateExpressionHandle(params.expression, params.isFunction, parseArgument(params.arg))) };
+    return { handle: ElementHandleDispatcher.fromJSHandle(this, await this._object.evaluateExpressionHandle(params.expression, params.isFunction, parseArgument(params.arg), params.isolatedContext)) };
   }
 }
 
diff -ruN playwright/packages/playwright-core/src/server/firefox/ffPage.ts patchright/packages/playwright-core/src/server/firefox/ffPage.ts
--- playwright/packages/playwright-core/src/server/firefox/ffPage.ts	2025-06-14 21:50:46.204604700 +0200
+++ patchright/packages/playwright-core/src/server/firefox/ffPage.ts	2025-06-14 21:53:22.282414000 +0200
@@ -390,7 +390,7 @@
     await this._session.send('Page.setInitScripts', { scripts: this._initScripts.map(s => ({ script: s.initScript.source, worldName: s.worldName })) });
   }
 
-  async removeNonInternalInitScripts() {
+  async removeInitScripts() {
     this._initScripts = this._initScripts.filter(s => s.initScript.internal);
     await this._session.send('Page.setInitScripts', { scripts: this._initScripts.map(s => ({ script: s.initScript.source, worldName: s.worldName })) });
   }
diff -ruN playwright/packages/playwright-core/src/server/frameSelectors.ts patchright/packages/playwright-core/src/server/frameSelectors.ts
--- playwright/packages/playwright-core/src/server/frameSelectors.ts	2025-06-14 21:50:46.341102400 +0200
+++ patchright/packages/playwright-core/src/server/frameSelectors.ts	2025-06-14 21:53:22.272412800 +0200
@@ -23,7 +23,7 @@
 import type { JSHandle } from './javascript';
 import type * as types from './types';
 import type { ParsedSelector } from '../utils/isomorphic/selectorParser';
-
+import { NonRecoverableDOMError } from "./dom";
 
 export type SelectorInfo = {
   parsed: ParsedSelector,
@@ -66,13 +66,87 @@
   }
 
   async queryArrayInMainWorld(selector: string, scope?: ElementHandle): Promise<JSHandle<Element[]>> {
-    const resolved = await this.resolveInjectedForSelector(selector, { mainWorld: true }, scope);
+
+    // _debugLogger.debugLogger.log('api',`PVM14 queryArrayInMainWorld: selector=[${selector}] scope=[${scope}]...`);
+    const resolved = await this.resolveInjectedForSelector(selector, {
+      mainWorld: true
+    }, scope);
     // Be careful, |this.frame| can be different from |resolved.frame|.
-    if (!resolved)
-      throw new Error(`Failed to find frame for selector "${selector}"`);
-    return await resolved.injected.evaluateHandle((injected, { info, scope }) => {
-      return injected.querySelectorAll(info.parsed, scope || document);
-    }, { info: resolved.info, scope: resolved.scope });
+    if (!resolved) throw new Error(`Failed to find frame for selector "${selector}"`);
+    // _debugLogger.debugLogger.log('api',
+    //   `PVM14 queryArrayInMainWorld: resolved.info=[${JSON.stringify(resolved.info)}] resolved.scope=[${
+    //     resolved.scope}] resolved.frame !== this.frame [${resolved.frame !== this.frame}] ...`);
+
+    /* All this code below is needed because certain execution paths (e.g., 'all_inner_texts()' or 'element_handles()' invocations)
+        get here and, in the case of existing closed shadow roots, just by inspecting what is in the 'resolved.frame'
+        they wouldn't get all the elements. The real question is: WHY DIDN'T I HAVE TO IMPLEMENT THIS IN OTHER POINTS
+        OF THIS FILE AS 'query', 'queryCount' OR 'queryAll' ?
+        I think the response is that these functions aren't used anymore, but I'm not sure... */
+
+    // Get JSHandles to all closed shadow roots first. These handles will be passed to the browser-side function.
+    const closedShadowRootHandles = await resolved.frame.getClosedShadowRoots();
+    // _debugLogger.debugLogger.log('api', `PVM14 queryArrayInMainWorld: Found ${closedShadowRootHandles.length} closed shadow roots.`);
+
+    /* This function runs in the browser.
+        argInitialScope is a DOM element (or document/null).
+        argShadowRootDOMElements is an array of ShadowRoot DOM elements. */
+    const pageFunction = (injected, { argInfo, argInitialScope, argShadowRootDOMElements }) => {
+      const allFoundDOMElements = [];
+      const parsedSelector = argInfo.parsed;
+
+      /* 1. Query in the main document (or initial scope)
+          'injected.querySelectorAll' returns a NodeList or similar array-like structure of DOM elements. */
+      const mainDocNodeList = injected.querySelectorAll(parsedSelector, argInitialScope || document);
+      for (let i = 0; i < mainDocNodeList.length; i++) {
+        allFoundDOMElements.push(mainDocNodeList[i]);
+      }
+      // console.log(`PVM14 BROWSER: Found ${mainDocNodeList.length} elements in main/initial scope for selector:`, parsedSelector);
+
+      /* TODO: PVM14 Ugly as hell. Tailor-made "if" designed to make locator "> *" work.
+          The idea is—to avoid duplicates—not to check shadow roots if we are looking for "scope > *"
+          unless we are dealing with the host of the shadowRoot (in that case, the direct children of the host
+          are the shadowRoots and they must be inspected). */
+      var firstSimple = parsedSelector?.parts?.[0]?.body?.[0]?.simples?.[0];
+      var lookingForDirectChildElementsOfCurrentElement = firstSimple?.selector?.functions?.[0]?.name === "scope" && firstSimple?.combinator === ">";
+
+      /* 2. Query in each closed shadow root
+          argShadowRootDOMElements is an array of actual ShadowRoot DOM elements here. */
+      for (const shadowRoot of argShadowRootDOMElements) {
+        const isScopeTheHost = argInitialScope === shadowRoot.host;
+        if (lookingForDirectChildElementsOfCurrentElement && !isScopeTheHost) { } else {
+          const shadowNodeList = injected.querySelectorAll(parsedSelector, shadowRoot);
+          for (let i = 0; i < shadowNodeList.length; i++) {
+            allFoundDOMElements.push(shadowNodeList[i]);
+          }
+        }
+        // console.log(`PVM14 BROWSER: Found ${shadowNodeList.length} elements in a shadow root for selector:`, parsedSelector);
+      }
+      // console.log(`PVM14 BROWSER: Total elements found: ${allFoundDOMElements.length}`);
+      return allFoundDOMElements; // This will be an array of DOM elements
+    };
+
+    /* Execute the pageFunction in the browser.
+        - resolved.injected is the InjectedScript instance for the correct context.
+        - The second argument to evaluateHandle is an object containing arguments for pageFunction.
+          JSHandles (like resolved.scope and elements of closedShadowRootHandles) passed here
+          will be resolved to their corresponding DOM elements/values within pageFunction. */
+    const finalArrayHandle = await resolved.injected.evaluateHandle(
+      pageFunction,
+      { // Argument for pageFunction
+        argInfo: resolved.info,
+        argInitialScope: resolved.scope, // JSHandle, resolves to DOM element/null in pageFunction
+        argShadowRootDOMElements: closedShadowRootHandles // Array of JSHandles, resolves to array of ShadowRoot DOM elements
+      }
+    );
+
+    /* Dispose the JSHandles for the shadow roots now that they've been used
+        and their corresponding DOM elements have been processed by pageFunction. */
+    for (const handle of closedShadowRootHandles) {
+      await handle.dispose();
+    }
+    // _debugLogger.debugLogger.log('api', `PVM14 queryArrayInMainWorld: Disposed ${closedShadowRootHandles.length} closed shadow root JSHandles.`);
+
+    return finalArrayHandle;
   }
 
   async queryCount(selector: string): Promise<number> {
@@ -134,9 +208,9 @@
           throw injected.createStacklessError(`Selector "${selectorString}" resolved to ${injected.previewNode(element)}, <iframe> was expected`);
         return element;
       }, { info, scope: i === 0 ? scope : undefined, selectorString: stringifySelector(info.parsed) });
-      const element = handle.asElement() as ElementHandle<Element> | null;
-      if (!element)
-        return null;
+      let element = handle.asElement() as ElementHandle<Element> | null;
+      if (!element) // My modification: instead of giving up, look for the frame in closed shadowRoot objects
+        element = await this.lookForFrameInClosedShadowRoots(frame, injectedScript, info, stringifySelector(info.parsed))
       const maybeFrame = await frame._page._delegate.getContentFrame(element);
       element.dispose();
       if (!maybeFrame)
@@ -158,6 +232,41 @@
     const injected = await context.injectedScript();
     return { injected, info: resolved.info, frame: resolved.frame, scope: resolved.scope };
   }
+
+  async lookForFrameInClosedShadowRoots(frame, injectedScript, info, selectorString) {
+    const closedShadowRoots = await frame.getClosedShadowRoots()
+    const elements = []
+    for (const shadowRootHandle of closedShadowRoots) {
+      const handle = await injectedScript.evaluateHandle((remoteInjectedScript, {
+        info,
+        scope,
+        selectorString
+      }) => {
+        const element = remoteInjectedScript.querySelector(info.parsed, scope, info.strict);
+        if (element && element.nodeName !== 'IFRAME' && element.nodeName !== 'FRAME')
+          throw remoteInjectedScript.createStacklessError(`Selector "${selectorString}" resolved to ${remoteInjectedScript.previewNode(element)}, <iframe> was expected`);
+        return element;
+      }, {
+        info,
+        scope: shadowRootHandle,
+        selectorString
+      });
+      const element = handle.asElement();
+      if (element) elements.push(element)
+      // Getting rid of the shadowRootHandle after using it to avoid creating memory leaks ...
+      await shadowRootHandle.dispose();
+    }
+
+    if (elements.length > 1) {
+      // We throw a NonRecoverableDOMError indicating multiple frames found within closed shadow roots.
+      // I'm not sure if this is really an error but I want to see it when it happens and I want it to stop the execution ...
+      const elementsPreview = elements.map(e => e.toString()).join(', ');
+      throw new NonRecoverableDOMError(`Selector "${selectorString}" resolved to ${elements.length} elements in closed shadow roots: [${elementsPreview}]. Expected 1 frame element.`);
+    }
+
+    // Return the single element found, or null if none were found.
+    return elements.length === 1 ? elements[0] : null;
+  }
 }
 
 async function adoptIfNeeded<T extends Node>(handle: ElementHandle<T>, context: FrameExecutionContext): Promise<ElementHandle<T>> {
diff -ruN playwright/packages/playwright-core/src/server/frames.ts patchright/packages/playwright-core/src/server/frames.ts
--- playwright/packages/playwright-core/src/server/frames.ts	2025-06-14 21:50:46.342603200 +0200
+++ patchright/packages/playwright-core/src/server/frames.ts	2025-06-14 21:53:22.271911700 +0200
@@ -1,3 +1,7 @@
+// undetected-undetected_playwright-patch - custom imports
+import { CRExecutionContext } from './chromium/crExecutionContext';
+import { FrameExecutionContext } from './dom';
+import crypto from 'crypto';
 /**
  * Copyright 2017 Google Inc. All rights reserved.
  * Modifications copyright (c) Microsoft Corporation.
@@ -530,6 +534,9 @@
   }
 
   _onClearLifecycle() {
+    this._isolatedWorld = undefined;
+    this._mainWorld = undefined;
+    this._iframeWorld = undefined;
     for (const event of this._firedLifecycleEvents)
       this.emit(Frame.Events.RemoveLifecycle, event);
     this._firedLifecycleEvents.clear();
@@ -743,12 +750,68 @@
     return this._page._delegate.getFrameElement(this);
   }
 
-  _context(world: types.World): Promise<dom.FrameExecutionContext> {
-    return this._contextData.get(world)!.contextPromise.then(contextOrDestroyedReason => {
-      if (contextOrDestroyedReason instanceof js.ExecutionContext)
-        return contextOrDestroyedReason;
-      throw new Error(contextOrDestroyedReason.destroyedReason);
-    });
+  async _context(world: types.World): Promise<dom.FrameExecutionContext> {
+    /* await this._page._delegate._mainFrameSession._client._sendMayFail('DOM.enable');
+        var globalDoc = await this._page._delegate._mainFrameSession._client._sendMayFail('DOM.getFrameOwner', { frameId: this._id });
+        if (globalDoc) {
+          await this._page._delegate._mainFrameSession._client._sendMayFail("DOM.resolveNode", { nodeId: globalDoc.nodeId })
+        } */
+
+        // if (this.isDetached()) throw new Error('Frame was detached');
+        try {
+          var client = this._page._delegate._sessionForFrame(this)._client
+        } catch (e) { var client = this._page._delegate._mainFrameSession._client }
+        var iframeExecutionContextId = await this._getFrameMainFrameContextId(client)
+
+        if (world == "main") {
+          // Iframe Only
+          if (this != this._page.mainFrame() && iframeExecutionContextId && this._iframeWorld == undefined) {
+            var executionContextId = iframeExecutionContextId
+            var crContext = new CRExecutionContext(client, { id: executionContextId }, this._id)
+            this._iframeWorld = new FrameExecutionContext(crContext, this, world)
+            this._page._delegate._mainFrameSession._onExecutionContextCreated({
+              id: executionContextId, origin: world, name: world, auxData: { isDefault: this === this._page.mainFrame(), type: 'isolated', frameId: this._id }
+            })
+          } else if (this._mainWorld == undefined) {
+            var globalThis = await client._sendMayFail('Runtime.evaluate', {
+              expression: "globalThis",
+              serializationOptions: { serialization: "idOnly" }
+            });
+            if (!globalThis) { return }
+            var globalThisObjId = globalThis["result"]['objectId']
+            var executionContextId = parseInt(globalThisObjId.split('.')[1], 10);
+
+            var crContext = new CRExecutionContext(client, { id: executionContextId }, this._id)
+            this._mainWorld = new FrameExecutionContext(crContext, this, world)
+            this._page._delegate._mainFrameSession._onExecutionContextCreated({
+              id: executionContextId, origin: world, name: world, auxData: { isDefault: this === this._page.mainFrame(), type: 'isolated', frameId: this._id }
+            })
+          }
+        }
+        if (world != "main" && this._isolatedWorld == undefined) {
+          world = "utility"
+          var result = await client._sendMayFail('Page.createIsolatedWorld', {
+            frameId: this._id, grantUniveralAccess: true, worldName: world
+          });
+          if (!result) {
+            // if (this.isDetached()) throw new Error("Frame was detached");
+            return
+          }
+          var executionContextId = result.executionContextId
+          var crContext = new CRExecutionContext(client, { id: executionContextId }, this._id)
+          this._isolatedWorld = new FrameExecutionContext(crContext, this, world)
+          this._page._delegate._mainFrameSession._onExecutionContextCreated({
+            id: executionContextId, origin: world, name: world, auxData: { isDefault: this === this._page.mainFrame(), type: 'isolated', frameId: this._id }
+          })
+        }
+
+        if (world != "main") {
+          return this._isolatedWorld;
+        } else if (this != this._page.mainFrame() && iframeExecutionContextId) {
+          return this._iframeWorld;
+        } else {
+          return this._mainWorld;
+        }
   }
 
   _mainContext(): Promise<dom.FrameExecutionContext> {
@@ -796,58 +859,49 @@
   }
 
   async waitForSelectorInternal(progress: Progress, selector: string, performActionPreChecks: boolean, options: types.WaitForElementOptions, scope?: dom.ElementHandle): Promise<dom.ElementHandle<Element> | null> {
-    const { state = 'visible' } = options;
-    const promise = this.retryWithProgressAndTimeouts(progress, [0, 20, 50, 100, 100, 500], async continuePolling => {
-      if (performActionPreChecks)
-        await this._page.performActionPreChecks(progress);
-
-      const resolved = await this.selectors.resolveInjectedForSelector(selector, options, scope);
-      progress.throwIfAborted();
-      if (!resolved) {
-        if (state === 'hidden' || state === 'detached')
-          return null;
-        return continuePolling;
-      }
-      const result = await resolved.injected.evaluateHandle((injected, { info, root }) => {
-        if (root && !root.isConnected)
-          throw injected.createStacklessError('Element is not attached to the DOM');
-        const elements = injected.querySelectorAll(info.parsed, root || document);
-        const element: Element | undefined  = elements[0];
-        const visible = element ? injected.utils.isElementVisible(element) : false;
-        let log = '';
-        if (elements.length > 1) {
-          if (info.strict)
-            throw injected.strictModeViolationError(info.parsed, elements);
-          log = `  locator resolved to ${elements.length} elements. Proceeding with the first one: ${injected.previewNode(elements[0])}`;
-        } else if (element) {
-          log = `  locator resolved to ${visible ? 'visible' : 'hidden'} ${injected.previewNode(element)}`;
+    const {
+      state = 'visible'
+    } = options;
+    const promise = this._retryWithProgressIfNotConnected(progress, selector, options.strict, true, async handle => {
+      const attached = !!handle;
+      var visible = false;
+      if (attached) {
+        if (handle.parentNode.constructor.name == "ElementHandle") {
+          visible = await handle.parentNode.evaluateInUtility(([injected, node, { handle }]) => {
+            return handle ? injected.utils.isElementVisible(handle) : false;
+          }, {
+            handle
+          });
+        } else {
+          visible = await handle.parentNode.evaluate((injected, { handle }) => {
+            return handle ? injected.utils.isElementVisible(handle) : false;
+          }, {
+            handle
+          });
         }
-        return { log, element, visible, attached: !!element };
-      }, { info: resolved.info, root: resolved.frame === this ? scope : undefined });
-      const { log, visible, attached } = await result.evaluate(r => ({ log: r.log, visible: r.visible, attached: r.attached }));
-      if (log)
-        progress.log(log);
-      const success = { attached, detached: !attached, visible, hidden: !visible }[state];
+      }
+
+      const success = {
+        attached,
+        detached: !attached,
+        visible,
+        hidden: !visible
+      }[state];
       if (!success) {
-        result.dispose();
-        return continuePolling;
+        return "internal:continuepolling";
       }
       if (options.omitReturnValue) {
-        result.dispose();
         return null;
       }
-      const element = state === 'attached' || state === 'visible' ? await result.evaluateHandle(r => r.element) : null;
-      result.dispose();
-      if (!element)
-        return null;
-      if ((options as any).__testHookBeforeAdoptNode)
-        await (options as any).__testHookBeforeAdoptNode();
+      const element = state === 'attached' || state === 'visible' ? handle : null;
+      if (!element) return null;
+      if (options.__testHookBeforeAdoptNode) await options.__testHookBeforeAdoptNode();
       try {
-        return await element._adoptTo(await resolved.frame._mainContext());
+        return element;
       } catch (e) {
-        return continuePolling;
+        return "internal:continuepolling";
       }
-    });
+    }, 'returnOnNotResolved');
     return scope ? scope._context._raceAgainstContextDestroyed(promise) : promise;
   }
 
@@ -881,12 +935,45 @@
     }, { parsed: selectors, color: color });
   }
 
+  /**
+   * Implementing the same logic as in 'queryCount': this function returns 'handles', 'queryCount' returns
+   * 'handles.length'. Before this modification this function invoked FrameSelectors.queryAll which I think
+   * isn't used anymore ...
+   */
   async querySelectorAll(selector: string): Promise<dom.ElementHandle<Element>[]> {
-    return this.selectors.queryAll(selector);
+    const custom_metadata = {
+      "internal": false,
+      "log": []
+    };
+    const controller = new ProgressController(custom_metadata, this);
+    return await controller.run(async progress => {
+      const handles = await this._retryWithProgressIfNotConnected(progress, selector, false, false , async result => {
+        if (!result || !result[0]) { // No elements found, or result itself is null from _retry...
+            return [];
+        }
+        return result[1]; // Return currentScopingElements (array of ElementHandles)
+      }, 'returnAll');
+      // If _retryWithProgressIfNotConnected itself returns null (e.g., on timeout before action is run, or if action returns null explicitly),
+      // handles will be null. Otherwise, it's the array from the action (possibly empty).
+      return handles === null ? [] : handles;
+    });
   }
 
   async queryCount(selector: string): Promise<number> {
-    return await this.selectors.queryCount(selector);
+    const custom_metadata = {
+      "internal": false,
+      "log": []
+    };
+    const controller = new ProgressController(custom_metadata, this);
+    return await controller.run(async progress => {
+      progress.log("waiting for " + this._asLocator(selector));
+      const promise = await this._retryWithProgressIfNotConnected(progress, selector, false, false, async result => {
+        const handle = result[0];
+        const handles = result[1];
+        return handle ? handles.length : 0;
+      }, 'returnAll');
+      return promise === null ? -1 : promise; // It was returning null and causing an ugly Locator.count: value: expected number, got object
+    }); // <<< REMOVED ', 100' // A bit geeky but its okay :D => IT'S NOT OKAY IF YOU ARE DOING SOMETHING THAT TAKES LONGER
   }
 
   async content(): Promise<string> {
@@ -908,31 +995,38 @@
   }
 
   async setContent(metadata: CallMetadata, html: string, options: types.NavigateOptions = {}): Promise<void> {
-    const controller = new ProgressController(metadata, this);
-    return controller.run(async progress => {
-      await this.raceNavigationAction(progress, options, async () => {
-        const waitUntil = options.waitUntil === undefined ? 'load' : options.waitUntil;
-        progress.log(`setting frame content, waiting until "${waitUntil}"`);
-        const tag = `--playwright--set--content--${this._id}--${++this._setContentCounter}--`;
-        const context = await this._utilityContext();
-        const lifecyclePromise = new Promise((resolve, reject) => {
-          this._page._frameManager._consoleMessageTags.set(tag, () => {
-            // Clear lifecycle right after document.open() - see 'tag' below.
-            this._onClearLifecycle();
-            this._waitForLoadState(progress, waitUntil).then(resolve).catch(reject);
+      const controller = new ProgressController(metadata, this);
+      return controller.run(async progress => {
+        await this.raceNavigationAction(progress, options, async () => {
+          const waitUntil = options.waitUntil === undefined ? 'load' : options.waitUntil;
+          progress.log(`setting frame content, waiting until "${waitUntil}"`);
+          const tag = `--playwright--set--content--${this._id}--${++this._setContentCounter}--`;
+          const bindingName = "_tagDebug" + crypto.randomBytes(20).toString('hex');
+          const context = await this._utilityContext();
+          await this._page._delegate._mainFrameSession._client.send('Runtime.addBinding', { name: bindingName });
+          const lifecyclePromise = new Promise(async (resolve, reject) => {
+            await this._page.exposeBinding(bindingName, false, (tag) => {
+              this._onClearLifecycle();
+              this._waitForLoadState(progress, waitUntil).then(resolve).catch(reject);
+            });
+          });
+          const contentPromise = context.evaluate(({ html, tag, bindingName }) => {
+            document.open();
+            var _tagDebug = window[bindingName].bind({});
+            delete window[bindingName]
+            _tagDebug('{ "name": "' + bindingName + '", "seq": 1, "serializedArgs": ["' + tag + '"] }');
+            console.debug(tag);  // eslint-disable-line no-console
+            document.write(html);
+            document.close();
+          }, { html, tag,
+            bindingName
           });
+          await Promise.all([contentPromise, lifecyclePromise]);
+          return null;
         });
-        const contentPromise = context.evaluate(({ html, tag }) => {
-          document.open();
-          console.debug(tag);  // eslint-disable-line no-console
-          document.write(html);
-          document.close();
-        }, { html, tag });
-        await Promise.all([contentPromise, lifecyclePromise]);
-        return null;
-      });
-    }, this._page._timeoutSettings.navigationTimeout(options));
-  }
+      }, this._page._timeoutSettings.navigationTimeout(options));
+    }
+
 
   name(): string {
     return this._name || '';
@@ -1125,50 +1219,74 @@
     selector: string,
     strict: boolean | undefined,
     performActionPreChecks: boolean,
-    action: (handle: dom.ElementHandle<Element>) => Promise<R | 'error:notconnected'>): Promise<R> {
-    progress.log(`waiting for ${this._asLocator(selector)}`);
+    action: (handle: dom.ElementHandle<Element>) => Promise<R | 'error:notconnected'>, returnAction: boolean | undefined): Promise<R> {
+    progress.log("waiting for " + this._asLocator(selector));
     return this.retryWithProgressAndTimeouts(progress, [0, 20, 50, 100, 100, 500], async continuePolling => {
-      if (performActionPreChecks)
-        await this._page.performActionPreChecks(progress);
-
-      const resolved = await this.selectors.resolveInjectedForSelector(selector, { strict });
+      if (performActionPreChecks) await this._page.performActionPreChecks(progress);
+      const resolved = await this.selectors.resolveInjectedForSelector(selector, {
+        strict
+      });
       progress.throwIfAborted();
-      if (!resolved)
+      if (!resolved) {
+        if (returnAction === 'returnOnNotResolved' || returnAction === 'returnAll') return null;
         return continuePolling;
-      const result = await resolved.injected.evaluateHandle((injected, { info, callId }) => {
-        const elements = injected.querySelectorAll(info.parsed, document);
-        if (callId)
-          injected.markTargetElements(new Set(elements), callId);
-        const element = elements[0] as Element | undefined;
-        let log = '';
-        if (elements.length > 1) {
-          if (info.strict)
+      }
+
+      try {
+        var client = this._page._delegate._sessionForFrame(resolved.frame)._client;
+      } catch (e) {
+        var client = this._page._delegate._mainFrameSession._client;
+      }
+      var context = await resolved.frame._context("main");
+
+      const documentNode = await client.send('Runtime.evaluate', {
+        expression: "document",
+        serializationOptions: {
+          serialization: "idOnly"
+        },
+        contextId: context.delegate._contextId,
+      });
+      const documentScope = new dom.ElementHandle(context, documentNode.result.objectId);
+
+      const currentScopingElements = await this._customFindElementsByParsed(resolved, client, context, documentScope, progress, resolved.info.parsed);
+      if (currentScopingElements.length == 0) {
+        // TODO: Dispose?
+        if (returnAction === 'returnOnNotResolved' || returnAction === 'returnAll') return null;
+        return continuePolling;
+      }
+      const resultElement = currentScopingElements[0];
+      if (currentScopingElements.length > 1) {
+        if (resolved.info.strict) {
+          await resolved.injected.evaluateHandle((injected, {
+            info,
+            elements
+          }) => {
             throw injected.strictModeViolationError(info.parsed, elements);
-          log = `  locator resolved to ${elements.length} elements. Proceeding with the first one: ${injected.previewNode(elements[0])}`;
-        } else if (element) {
-          log = `  locator resolved to ${injected.previewNode(element)}`;
+          }, {
+            info: resolved.info,
+            elements: currentScopingElements
+          });
         }
-        return { log, success: !!element, element };
-      }, { info: resolved.info, callId: progress.metadata.id });
-      const { log, success } = await result.evaluate(r => ({ log: r.log, success: r.success }));
-      if (log)
-        progress.log(log);
-      if (!success) {
-        result.dispose();
-        return continuePolling;
+        progress.log("  locator resolved to " + currentScopingElements.length + " elements. Proceeding with the first one: " + resultElement.preview());
+      } else if (resultElement) {
+        progress.log("  locator resolved to " + resultElement.preview());
       }
-      const element = await result.evaluateHandle(r => r.element) as dom.ElementHandle<Element>;
-      result.dispose();
+
       try {
-        const result = await action(element);
+        var result = null;
+        if (returnAction === 'returnAll') {
+          result = await action([resultElement, currentScopingElements]);
+        } else {
+          result = await action(resultElement);
+        }
         if (result === 'error:notconnected') {
           progress.log('element was detached from the DOM, retrying');
           return continuePolling;
+        } else if (result === 'internal:continuepolling') {
+          return continuePolling;
         }
         return result;
-      } finally {
-        element?.dispose();
-      }
+      } finally { }
     });
   }
 
@@ -1319,17 +1437,34 @@
 
   async isVisibleInternal(selector: string, options: types.StrictOptions = {}, scope?: dom.ElementHandle): Promise<boolean> {
     try {
-      const resolved = await this.selectors.resolveInjectedForSelector(selector, options, scope);
-      if (!resolved)
-        return false;
-      return await resolved.injected.evaluate((injected, { info, root }) => {
-        const element = injected.querySelector(info.parsed, root || document, info.strict);
-        const state = element ? injected.elementState(element, 'visible') : { matches: false, received: 'error:notconnected' };
-        return state.matches;
-      }, { info: resolved.info, root: resolved.frame === this ? scope : undefined });
+      const custom_metadata = { "internal": false, "log": [] };
+      const controller = new ProgressController(custom_metadata, this);
+      return await controller.run(async progress => {
+        progress.log("waiting for " + this._asLocator(selector));
+        const promise = this._retryWithProgressIfNotConnected(progress, selector, options.strict, false, async handle => {
+          if (handle.parentNode.constructor.name == "ElementHandle") {
+            return await handle.parentNode.evaluateInUtility(([injected, node, { handle }]) => {
+              const state = handle ? injected.elementState(handle, 'visible') : {
+                matches: false,
+                received: 'error:notconnected'
+              };
+              return state.matches;
+            }, { handle });
+          } else {
+            return await handle.parentNode.evaluate((injected, { handle }) => {
+              const state = handle ? injected.elementState(handle, 'visible') : {
+                matches: false,
+                received: 'error:notconnected'
+              };
+              return state.matches;
+            }, { handle });
+          }
+        });
+
+        return scope ? scope._context._raceAgainstContextDestroyed(promise) : promise;
+      }, 100); // A bit geeky but its okay :D
     } catch (e) {
-      if (js.isJavaScriptErrorInEvaluate(e) || isInvalidSelectorError(e) || isSessionClosedError(e))
-        throw e;
+      if (js.isJavaScriptErrorInEvaluate(e) || isInvalidSelectorError(e) || isSessionClosedError(e)) throw e;
       return false;
     }
   }
@@ -1489,40 +1624,46 @@
   }
 
   private async _expectInternal(progress: Progress, selector: string, options: FrameExpectParams, lastIntermediateResult: { received?: any, isSet: boolean }) {
-    const selectorInFrame = await this.selectors.resolveFrameForSelector(selector, { strict: true });
-    progress.throwIfAborted();
+    progress.log("waiting for " + this._asLocator(selector));
+    const isArray = options.expression === 'to.have.count' || options.expression.endsWith('.array');
 
-    const { frame, info } = selectorInFrame || { frame: this, info: undefined };
-    const world = options.expression === 'to.have.property' ? 'main' : (info?.world ?? 'utility');
-    const context = await frame._context(world);
-    const injected = await context.injectedScript();
-    progress.throwIfAborted();
+    const promise = await this._retryWithProgressIfNotConnected(progress, selector, !isArray, false, async result => {
+      const handle = result[0];
+      const handles = result[1];
+
+      if (handle.parentNode.constructor.name == "ElementHandle") {
+        return await handle.parentNode.evaluateInUtility(async ([injected, node, { handle, options, handles }]) => {
+          return await injected.expect(handle, options, handles);
+        }, { handle, options, handles });
+      } else {
+        return await handle.parentNode.evaluate(async (injected, { handle, options, handles }) => {
+          return await injected.expect(handle, options, handles);
+        }, { handle, options, handles });
+      }
+    }, 'returnAll');
+
+    // Default Values, if no Elements found
+    var matches = false;
+    var received = 0;
+    var missingReceived = null;
+    if (promise) {
+      matches = promise.matches;
+      received = promise.received;
+      missingReceived = promise.missingReceived;
+    } else if (options.expectedNumber === 0) {
+      matches = true;
+    }
 
-    const { log, matches, received, missingReceived } = await injected.evaluate(async (injected, { info, options, callId }) => {
-      const elements = info ? injected.querySelectorAll(info.parsed, document) : [];
-      if (callId)
-        injected.markTargetElements(new Set(elements), callId);
-      const isArray = options.expression === 'to.have.count' || options.expression.endsWith('.array');
-      let log = '';
-      if (isArray)
-        log = `  locator resolved to ${elements.length} element${elements.length === 1 ? '' : 's'}`;
-      else if (elements.length > 1)
-        throw injected.strictModeViolationError(info!.parsed, elements);
-      else if (elements.length)
-        log = `  locator resolved to ${injected.previewNode(elements[0])}`;
-      return { log, ...await injected.expect(elements[0], options, elements) };
-    }, { info, options, callId: progress.metadata.id });
-
-    if (log)
-      progress.log(log);
-    // Note: missingReceived avoids `unexpected value "undefined"` when element was not found.
+    // Note: missingReceived avoids unexpected value "undefined" when element was not found.
     if (matches === options.isNot) {
       lastIntermediateResult.received = missingReceived ? '<element(s) not found>' : received;
       lastIntermediateResult.isSet = true;
-      if (!missingReceived && !Array.isArray(received))
-        progress.log(`  unexpected value "${renderUnexpectedValue(options.expression, received)}"`);
+      if (!missingReceived && !Array.isArray(received)) progress.log('  unexpected value "' + renderUnexpectedValue(options.expression, received) + '"');
     }
-    return { matches, received };
+    return {
+      matches,
+      received
+    };
   }
 
   async _waitForFunctionExpression<R>(metadata: CallMetadata, expression: string, isFunction: boolean | undefined, arg: any, options: types.WaitForFunctionOptions, world: types.World = 'main'): Promise<js.SmartHandle<R>> {
@@ -1632,28 +1773,27 @@
     const callbackText = body.toString();
     const controller = new ProgressController(metadata, this);
     return controller.run(async progress => {
-      progress.log(`waiting for ${this._asLocator(selector)}`);
-      const promise = this.retryWithProgressAndTimeouts(progress, [0, 20, 50, 100, 100, 500], async continuePolling => {
-        const resolved = await this.selectors.resolveInjectedForSelector(selector, options, scope);
-        progress.throwIfAborted();
-        if (!resolved)
-          return continuePolling;
-        const { log, success, value } = await resolved.injected.evaluate((injected, { info, callbackText, taskData, callId, root }) => {
-          const callback = injected.eval(callbackText) as ElementCallback<T, R>;
-          const element = injected.querySelector(info.parsed, root || document, info.strict);
-          if (!element)
-            return { success: false };
-          const log = `  locator resolved to ${injected.previewNode(element)}`;
-          if (callId)
-            injected.markTargetElements(new Set([element]), callId);
-          return { log, success: true, value: callback(injected, element, taskData as T) };
-        }, { info: resolved.info, callbackText, taskData, callId: progress.metadata.id, root: resolved.frame === this ? scope : undefined });
-
-        if (log)
-          progress.log(log);
-        if (!success)
-          return continuePolling;
-        return value!;
+      progress.log("waiting for "+ this._asLocator(selector));
+      const promise = this._retryWithProgressIfNotConnected(progress, selector, false, false, async handle => {
+        if (handle.parentNode.constructor.name == "ElementHandle") {
+          return await handle.parentNode.evaluateInUtility(([injected, node, { callbackText, handle, taskData }]) => {
+            const callback = injected.eval(callbackText);
+            return callback(injected, handle, taskData);
+          }, {
+            callbackText,
+            handle,
+            taskData
+          });
+        } else {
+          return await handle.parentNode.evaluate((injected, { callbackText, handle, taskData }) => {
+            const callback = injected.eval(callbackText);
+            return callback(injected, handle, taskData);
+          }, {
+            callbackText,
+            handle,
+            taskData
+          });
+        }
       });
       return scope ? scope._context._raceAgainstContextDestroyed(promise) : promise;
     }, this._page._timeoutSettings.timeout(options));
@@ -1757,6 +1897,258 @@
   private _asLocator(selector: string) {
     return asLocator(this._page.attribution.playwright.options.sdkLanguage, selector);
   }
+
+  _isolatedWorld: dom.FrameExecutionContext;
+  _mainWorld: dom.FrameExecutionContext;
+  _iframeWorld: dom.FrameExecutionContext;
+
+  async _getFrameMainFrameContextId(client): Promise<number> {
+    try {
+        var globalDocument = await client._sendMayFail("DOM.getFrameOwner", {frameId: this._id,});
+        if (globalDocument && globalDocument.nodeId) {
+          var describedNode = await client._sendMayFail("DOM.describeNode", {
+            backendNodeId: globalDocument.backendNodeId,
+          });
+          if (describedNode) {
+            var resolvedNode = await client._sendMayFail("DOM.resolveNode", {
+              nodeId: describedNode.node.contentDocument.nodeId,
+            });
+            var _executionContextId = parseInt(resolvedNode.object.objectId.split(".")[1], 10);
+            return _executionContextId;
+            }
+          }
+        } catch (e) {}
+        return 0;
+  }
+
+  async _customFindElementsByParsed(resolved, client, context, documentScope, progress, parsed) {
+    var parsedEdits = { ...parsed };
+    // Note: We start scoping at document level
+    var currentScopingElements = [documentScope];
+    while (parsed.parts.length > 0) {
+      var part = parsed.parts.shift();
+      parsedEdits.parts = [part];
+      var isUsingXPath = false;
+      // Getting All Elements
+      var elements = [];
+      var elementsIndexes = [];
+
+      if (part.name == "xpath") {
+        isUsingXPath = true;
+      }
+      if (part.name == "nth") {
+        const partNth = Number(part.body);
+        if (partNth > currentScopingElements.length || partNth < -currentScopingElements.length) {
+          return continuePolling;
+        } else {
+          currentScopingElements = [currentScopingElements.at(partNth)];
+          continue;
+        }
+      } else if (part.name == "internal:or") {
+        var orredElements = await this._customFindElementsByParsed(resolved, client, context, documentScope, progress, part.body.parsed);
+        elements = currentScopingElements.concat(orredElements);
+      } else if (part.name == "internal:and") {
+        var andedElements = await this._customFindElementsByParsed(resolved, client, context, documentScope, progress, part.body.parsed);
+        const backendNodeIds = new Set(andedElements.map(item => item.backendNodeId));
+        elements = currentScopingElements.filter(item => backendNodeIds.has(item.backendNodeId));
+      } else {
+        for (const scope of currentScopingElements) {
+          const describedScope = await client.send('DOM.describeNode', {
+            objectId: scope._objectId,
+            depth: -1,
+            pierce: true // This 'true' really pierces through closed shadowRoots but not iframes.
+          });            // It is not capable of overcoming the lack of the flag --disable-site-isolation-trials and that can bring problems ...
+
+          // Elements Queryed in the "current round"
+          var queryingElements = [];
+
+          if (!isUsingXPath) {
+            function findClosedShadowRoots(node, results = []) {
+              if (!node || typeof node !== 'object') return results;
+              if (node.shadowRoots && Array.isArray(node.shadowRoots)) {
+                for (const shadowRoot of node.shadowRoots) {
+                  if (shadowRoot.shadowRootType === 'closed' && shadowRoot.backendNodeId) {
+                    results.push(shadowRoot.backendNodeId);
+                  }
+                  findClosedShadowRoots(shadowRoot, results);
+                }
+              }
+              if (node.nodeName !== 'IFRAME' && node.children && Array.isArray(node.children)) {
+                for (const child of node.children) {
+                  findClosedShadowRoots(child, results);
+                }
+              }
+              return results;
+            }
+
+            var shadowRootBackendIds = findClosedShadowRoots(describedScope.node);
+            var shadowRoots = [];
+            // ESSENTIAL: Using 'DOM.resolveNode' you get a reference to the remote closed shadow root object THAT ALLOWS YOU TO OPERATE WITH IT
+            // using 'injected.querySelectorAll' BECAUSE ONCE YOU ARE 'POSITIONED' IN THE CLOSED SHADOW ROOT YOU CAN INSPECT INSIDE IT WITHOUT LIMITATIONS ...
+            for (var shadowRootBackendId of shadowRootBackendIds) {
+              var resolvedShadowRoot = await client.send('DOM.resolveNode', {
+                backendNodeId: shadowRootBackendId,
+                contextId: context.delegate._contextId
+              });
+              shadowRoots.push(new dom.ElementHandle(context, resolvedShadowRoot.object.objectId));
+            }
+
+            /* TODO: PVM14 Ugly as hell and potentially imperfect specific solution for the "> *" locator.
+                It aims to prevent duplicate counting by focusing only on first-level children.
+                Recursively obtained closed shadowRoots are ignored unless the current
+                scope is the shadowRoot's host, where shadowRoots are the direct children we are looking for. */
+            var firstSimple = parsedEdits?.parts?.[0]?.body?.[0]?.simples?.[0];
+            var lookingForDirectChildElementsOfCurrentElement = firstSimple?.selector?.functions?.[0]?.name === "scope" && firstSimple?.combinator === ">";
+
+            /* NOW COMES THE IMPORTANT PART:
+                => BASIC, THIS IS ABLE TO INTROSPECT closed shadowRoot BECAUSE IT EXECUTES querySelectorAll SPECIFICALLY TARGETING SUCH NODES. */
+            for (var shadowRoot of shadowRoots) {
+              const hostOfShadowRootHandle = await shadowRoot.evaluateHandle(sr => sr.host);
+              const describedHostNode = await client.send('DOM.describeNode', { objectId: hostOfShadowRootHandle._objectId });
+              const hostOfShadowRootBackendNodeId = describedHostNode.node.backendNodeId;
+              const isScopeTheHost = scope.backendNodeId === hostOfShadowRootBackendNodeId;
+              await hostOfShadowRootHandle.dispose();
+
+             if (!lookingForDirectChildElementsOfCurrentElement || isScopeTheHost) {
+                const shadowElements = await shadowRoot.evaluateHandleInUtility(([injected, node, {
+                  parsed,
+                  callId
+                }]) => {
+                  const elements = injected.querySelectorAll(parsed, node);
+                  if (callId) injected.markTargetElements(new Set(elements), callId);
+                  return elements;
+                }, {
+                  parsed: parsedEdits,
+                  callId: progress.metadata.id
+                });
+                const shadowElementsAmount = await shadowElements.getProperty("length");
+                queryingElements.push([shadowElements, shadowElementsAmount, shadowRoot]);
+              }
+            }
+          }
+
+          // Document Root Elements (not in CSR)
+          const rootElements = await scope.evaluateHandleInUtility(([injected, node, { parsed, callId }]) => {
+            const elements = injected.querySelectorAll(parsed, node);
+            if (callId) injected.markTargetElements(new Set(elements), callId);
+            return elements
+          }, {
+            parsed: parsedEdits,
+            callId: progress.metadata.id
+          });
+          const rootElementsAmount = await rootElements.getProperty("length");
+          queryingElements.push([rootElements, rootElementsAmount, resolved.injected]);
+
+          // Querying and Sorting the elements by their backendNodeId
+          for (var queryedElement of queryingElements) {
+            var elementsToCheck = queryedElement[0];
+            var elementsAmount = await queryedElement[1].jsonValue();
+            var parentNode = queryedElement[2];
+            for (var i = 0; i < elementsAmount; i++) {
+              if (parentNode.constructor.name == "ElementHandle") {
+                var elementToCheck = await parentNode.evaluateHandleInUtility(([injected, node, { index, elementsToCheck }]) => { return elementsToCheck[index]; }, { index: i, elementsToCheck: elementsToCheck });
+              } else {
+                var elementToCheck = await parentNode.evaluateHandle((injected, { index, elementsToCheck }) => { return elementsToCheck[index]; }, { index: i, elementsToCheck: elementsToCheck });
+              }
+              // For other Functions/Utilities
+              elementToCheck.parentNode = parentNode;
+              var resolvedElement = await client.send('DOM.describeNode', {
+                objectId: elementToCheck._objectId,
+                depth: -1,
+              });
+              // Note: Possible Bug, Maybe well actually have to check the Documents Node Position instead of using the backendNodeId
+              elementToCheck.backendNodeId = resolvedElement.node.backendNodeId;
+              elements.push(elementToCheck);
+            }
+          }
+        }
+      }
+      // Setting currentScopingElements to the elements we just queried
+      currentScopingElements = [];
+      for (var element of elements) {
+        var elemIndex = element.backendNodeId;
+        // Sorting the Elements by their occurrence in the DOM
+        var elemPos = elementsIndexes.findIndex(index => index > elemIndex);
+
+        // Sort the elements by their backendNodeId
+        if (elemPos === -1) {
+          currentScopingElements.push(element);
+          elementsIndexes.push(elemIndex);
+        } else {
+          currentScopingElements.splice(elemPos, 0, element);
+          elementsIndexes.splice(elemPos, 0, elemIndex);
+        }
+      }
+    }
+    return currentScopingElements;
+  }
+
+  async getClosedShadowRoots() {
+
+        // TODO:PVM14 Getting all the closed ShadowRoot recursively. We don't traverse IFRAMEs for the moment ...
+        let context = await this._context("main");
+        // Getting the CDP client ...
+        try {
+          var client = this._page._delegate._sessionForFrame(this)._client;
+        } catch (e) {
+          var client = this._page._delegate._mainFrameSession._client;
+        }
+        // Obtaining the objectId for the document
+        const documentNode = await client.send('Runtime.evaluate', { // https://chromedevtools.github.io/devtools-protocol/tot/Runtime/#method-evaluate
+          expression: "document",
+          serializationOptions: {
+            serialization: "idOnly"
+          },
+          contextId: context.delegate._contextId
+        });
+        // _debugLogger.debugLogger.log('api', `PVM14 getClosedShadowRoots: documentNode.result.objectId = [${documentNode.result.objectId}]`);
+        // TODO:PVM14 Geting the whole document as deep as IFRAMEs security allows us ...
+        const describedScope = await client.send('DOM.describeNode', {
+          objectId: documentNode.result.objectId,
+          depth: -1,
+          pierce: true
+        });
+        // _debugLogger.debugLogger.log('api',`PVM14 _customFindElementsByParsed: describedScope:\n ${JSON.stringify(describedScope,null,2)}\n`);
+
+        // TODO:PVM14 Probably in the future refactor this repeated code ...
+        function findClosedShadowRoots(node, results = []) {
+          if (!node || typeof node !== 'object') return results;
+
+          // Check for shadow roots in the current node
+          if (node.shadowRoots && Array.isArray(node.shadowRoots)) {
+            for (const shadowRoot of node.shadowRoots) {
+              if (shadowRoot.shadowRootType === 'closed' && shadowRoot.backendNodeId) {
+    //            _debugLogger.debugLogger.log('api', `PVM14 getClosedShadowRoots: closed shadowRoot DETECTED shadowRoot.nodeName = ${
+    //                  shadowRoot.nodeName} shadowRoot.backendNodeId=[${shadowRoot.backendNodeId}] ... `);
+                results.push(shadowRoot.backendNodeId);
+              }
+              findClosedShadowRoots(shadowRoot, results);
+            }
+          }
+
+          if (node.nodeName !== 'IFRAME' && node.children && Array.isArray(node.children)) {
+            for (const child of node.children) {
+              findClosedShadowRoots(child, results);
+            }
+          }
+          return results;
+        }
+
+        var shadowRootBackendIds = findClosedShadowRoots(describedScope.node);
+        // _debugLogger.debugLogger.log('api', `PVM14 getClosedShadowRoots: shadowRootBackendIds.length = [${shadowRootBackendIds.length}] ... `);
+
+        var shadowRoots = [];
+        for (var shadowRootBackendId of shadowRootBackendIds) {
+          var resolvedShadowRoot = await client.send('DOM.resolveNode', { // https://chromedevtools.github.io/devtools-protocol/tot/DOM/#method-resolveNode
+            backendNodeId: shadowRootBackendId,
+            contextId: context.delegate._contextId
+          });
+          shadowRoots.push(new dom.ElementHandle(context, resolvedShadowRoot.object.objectId)); // https://playwright.dev/docs/api/class-elementhandle
+        }
+        // _debugLogger.debugLogger.log('api', `PVM14 getClosedShadowRoots: shadowRoots.length = [${shadowRoots.length}] ... `);
+
+        return shadowRoots;
+  }
 }
 
 class SignalBarrier {
diff -ruN playwright/packages/playwright-core/src/server/injected/selectorEvaluator.ts patchright/packages/playwright-core/src/server/injected/selectorEvaluator.ts
--- playwright/packages/playwright-core/src/server/injected/selectorEvaluator.ts	2025-06-14 21:50:46.236102900 +0200
+++ patchright/packages/playwright-core/src/server/injected/selectorEvaluator.ts	2025-06-14 21:53:22.283413700 +0200
@@ -201,7 +201,12 @@
 
   private _matchesSimple(element: Element, simple: CSSSimpleSelector, context: QueryContext): boolean {
     return this._cached<boolean>(this._cacheMatchesSimple, element, [simple, context.scope, context.pierceShadow, context.originalScope], () => {
-      if (element === context.scope)
+      /* TODO: PVM14 There was and edge case for parsed "> *" window.__injectedScript.querySelectorAll(parsed, document.children[0]); =[].
+        I had to do this:
+        If the element is the context.scope, it cannot match if there are no functions. This prevents a simple selector like html
+        (where simple.css is "html" and simple.functions is empty) from matching when context.scope is <html> during an ancestor check.
+        A match for the scope element itself requires an explicit function like :scope */
+      if (element === context.scope && !simple.functions.length)
         return false;
       if (simple.css && !this._matchesCSS(element, simple.css))
         return false;
@@ -357,7 +362,14 @@
             query(element.shadowRoot);
         }
       }
-      query(context.scope);
+      /* TODO: PVM14 There was an edge case (using ">*" locator when the scope is the direct child of a closed shadow root) not working
+          and it was critical for my logic. To make it work I had to do this:
+          This is the most failsafe way I can think of introducing my Fix for taking into account the manoeuvre
+          in 'parentElementOrShadowHost'...  In this case 'scope' is equal to 'host' and we need to resort to 'originalScope' */
+      if (context?.originalScope?.parentNode?.mode == 'closed')
+        query(context.originalScope);
+      else
+        query(context.scope);
       return result;
     });
   }
@@ -405,6 +417,10 @@
     const actualScope = context.originalScope || context.scope;
     if (actualScope.nodeType === 9 /* Node.DOCUMENT_NODE */)
       return element === (actualScope as Document).documentElement;
+    /* TODO: PVM14 There was an edge case (using ">*" locator when the scope is the closed shadow root) not working and it was
+        critical for my logic. To make it work I had to do this: Taking into account the manoeuvre in 'parentElementOrShadowHost' ... */
+    if (actualScope.nodeType === 11)
+      return element === actualScope.host;
     return element === actualScope;
   },
 
diff -ruN playwright/packages/playwright-core/src/server/injected/xpathSelectorEngine.ts patchright/packages/playwright-core/src/server/injected/xpathSelectorEngine.ts
--- playwright/packages/playwright-core/src/server/injected/xpathSelectorEngine.ts	2025-06-14 21:50:46.236603400 +0200
+++ patchright/packages/playwright-core/src/server/injected/xpathSelectorEngine.ts	2025-06-14 21:53:22.284414700 +0200
@@ -18,6 +18,48 @@
 
 export const XPathEngine: SelectorEngine = {
   queryAll(root: SelectorRoot, selector: string): Element[] {
+    if (root.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {
+      console.log('Got CSR:', root);
+      const result: Element[] = [];
+      // Custom ClosedShadowRoot XPath Engine
+      const parser = new DOMParser();
+      // Function to (recursively) get all elements in the shadowRoot
+      function getAllChildElements(node) {
+        const elements = [];
+        const traverse = (currentNode) => {
+          if (currentNode.nodeType === Node.ELEMENT_NODE) elements.push(currentNode);
+          currentNode.childNodes?.forEach(traverse);
+        };
+        if (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE || node.nodeType === Node.ELEMENT_NODE) {
+          traverse(node);
+        }
+
+        return elements;
+      }
+
+      // Setting innerHTMl and childElements (all, recursive) to avoid race conditions
+      const csrHTMLContent = root.innerHTML;
+      const csrChildElements = getAllChildElements(root);
+      const htmlDoc = parser.parseFromString(csrHTMLContent, 'text/html');
+      const rootDiv = htmlDoc.body
+      const rootDivChildElements = getAllChildElements(rootDiv);
+      // Use the namespace prefix in the XPath expression
+      const it = htmlDoc.evaluate(selector, htmlDoc, null, XPathResult.ORDERED_NODE_ITERATOR_TYPE);
+      for (let node = it.iterateNext(); node; node = it.iterateNext()) {
+        // -1 for the body element
+        const nodeIndex = rootDivChildElements.indexOf(node) - 1;
+        if (nodeIndex >= 0) {
+          const originalNode = csrChildElements[nodeIndex];
+          if (originalNode.nodeType === Node.ELEMENT_NODE)
+            result.push(originalNode as Element);
+        }
+
+      }
+
+      return result;
+    }
+
+    
     if (selector.startsWith('/') && root.nodeType !== Node.DOCUMENT_NODE)
       selector = '.' + selector;
     const result: Element[] = [];
diff -ruN playwright/packages/playwright-core/src/server/javascript.ts patchright/packages/playwright-core/src/server/javascript.ts
--- playwright/packages/playwright-core/src/server/javascript.ts	2025-06-14 21:50:46.342102400 +0200
+++ patchright/packages/playwright-core/src/server/javascript.ts	2025-06-14 21:53:22.273411300 +0200
@@ -149,17 +149,33 @@
     return evaluate(this._context, false /* returnByValue */, pageFunction, this, arg);
   }
 
-  async evaluateExpression(expression: string, options: { isFunction?: boolean }, arg: any) {
-    const value = await evaluateExpression(this._context, expression, { ...options, returnByValue: true }, this, arg);
-    await this._context.doSlowMo();
-    return value;
-  }
+  async evaluateExpression(expression: string, options: { isFunction?: boolean }, arg: any, isolatedContext?: boolean) {
+    let context = this._context;
+      if (context.constructor.name === "FrameExecutionContext") {
+          const frame = context.frame;
+          if (frame) {
+              if (isolatedContext) context = await frame._utilityContext();
+              else if (!isolatedContext) context = await frame._mainContext();
+          }
+      }
+      const value = await evaluateExpression(context, expression, { ...options, returnByValue: true }, this, arg);
+      await context.doSlowMo();
+      return value;
+    }
 
-  async evaluateExpressionHandle(expression: string, options: { isFunction?: boolean }, arg: any): Promise<JSHandle<any>> {
-    const value = await evaluateExpression(this._context, expression, { ...options, returnByValue: false }, this, arg);
-    await this._context.doSlowMo();
-    return value;
-  }
+  async evaluateExpressionHandle(expression: string, options: { isFunction?: boolean }, arg: any, isolatedContext?: boolean): Promise<JSHandle<any>> {
+    let context = this._context;
+      if (this._context.constructor.name === "FrameExecutionContext") {
+          const frame = this._context.frame;
+          if (frame) {
+              if (isolatedContext) context = await frame._utilityContext();
+              else if (!isolatedContext) context = await frame._mainContext();
+          }
+      }
+      const value = await evaluateExpression(context, expression, { ...options, returnByValue: false }, this, arg);
+      await context.doSlowMo();
+      return value;
+    }
 
   async getProperty(propertyName: string): Promise<JSHandle> {
     const objectHandle = await this.evaluateHandle((object: any, propertyName) => {
diff -ruN playwright/packages/playwright-core/src/server/page.ts patchright/packages/playwright-core/src/server/page.ts
--- playwright/packages/playwright-core/src/server/page.ts	2025-06-14 21:50:46.343602900 +0200
+++ patchright/packages/playwright-core/src/server/page.ts	2025-06-14 21:53:22.274412300 +0200
@@ -60,7 +60,7 @@
   goForward(): Promise<boolean>;
   requestGC(): Promise<void>;
   addInitScript(initScript: InitScript): Promise<void>;
-  removeNonInternalInitScripts(): Promise<void>;
+  removeInitScripts(): Promise<void>;
   closePage(runBeforeUnload: boolean): Promise<void>;
 
   navigateFrame(frame: frames.Frame, url: string, referrer: string | undefined): Promise<frames.GotoResult>;
@@ -351,15 +351,15 @@
       throw new Error(`Function "${name}" has been already registered in the browser context`);
     const binding = new PageBinding(name, playwrightBinding, needsHandle);
     this._pageBindings.set(name, binding);
-    await this._delegate.addInitScript(binding.initScript);
-    await Promise.all(this.frames().map(frame => frame.evaluateExpression(binding.initScript.source).catch(e => {})));
+    await this._delegate.exposeBinding(binding);
   }
 
   async _removeExposedBindings() {
-    for (const [key, binding] of this._pageBindings) {
-      if (!binding.internal)
+    for (const key of this._pageBindings.keys()) {
+      if (!key.startsWith('__pw'))
         this._pageBindings.delete(key);
     }
+    await this._delegate.removeExposedBindings();
   }
 
   setExtraHTTPHeaders(headers: types.HeadersArray) {
@@ -576,8 +576,8 @@
   }
 
   async _removeInitScripts() {
-    this.initScripts = this.initScripts.filter(script => script.internal);
-    await this._delegate.removeNonInternalInitScripts();
+    this.initScripts.splice(0, this.initScripts.length);
+    await this._delegate.removeInitScripts();
   }
 
   needsRequestInterception(): boolean {
@@ -769,11 +769,6 @@
       this._browserContext.addVisitedOrigin(origin);
   }
 
-  allInitScripts() {
-    const bindings = [...this._browserContext._pageBindings.values(), ...this._pageBindings.values()];
-    return [...bindings.map(binding => binding.initScript), ...this._browserContext.initScripts, ...this.initScripts];
-  }
-
   getBinding(name: string) {
     return this._pageBindings.get(name) || this._browserContext._pageBindings.get(name);
   }
@@ -810,6 +805,10 @@
   markAsServerSideOnly() {
     this._isServerSideOnly = true;
   }
+
+  allBindings() {
+    return [...this._browserContext._pageBindings.values(), ...this._pageBindings.values()];
+  }
 }
 
 export class Worker extends SdkObject {
@@ -847,13 +846,29 @@
     this.openScope.close(new Error('Worker closed'));
   }
 
-  async evaluateExpression(expression: string, isFunction: boolean | undefined, arg: any): Promise<any> {
-    return js.evaluateExpression(await this._executionContextPromise, expression, { returnByValue: true, isFunction }, arg);
-  }
+  async evaluateExpression(expression: string, isFunction: boolean | undefined, arg: any, isolatedContext?: boolean): Promise<any> {
+    let context = await this._executionContextPromise;
+      if (context.constructor.name === "FrameExecutionContext") {
+          const frame = context.frame;
+          if (frame) {
+              if (isolatedContext) context = await frame._utilityContext();
+              else if (!isolatedContext) context = await frame._mainContext();
+          }
+      }
+      return js.evaluateExpression(context, expression, { returnByValue: true, isFunction }, arg);
+    }
 
-  async evaluateExpressionHandle(expression: string, isFunction: boolean | undefined, arg: any): Promise<any> {
-    return js.evaluateExpression(await this._executionContextPromise, expression, { returnByValue: false, isFunction }, arg);
-  }
+  async evaluateExpressionHandle(expression: string, isFunction: boolean | undefined, arg: any, isolatedContext?: boolean): Promise<any> {
+    let context = await this._executionContextPromise;
+      if (this._context.constructor.name === "FrameExecutionContext") {
+          const frame = this._context.frame;
+          if (frame) {
+              if (isolatedContext) context = await frame._utilityContext();
+              else if (!isolatedContext) context = await frame._mainContext();
+          }
+      }
+      return js.evaluateExpression(context, expression, { returnByValue: false, isFunction }, arg);
+    }
 }
 
 type BindingPayload = {
@@ -863,20 +878,16 @@
 };
 
 export class PageBinding {
-  static kPlaywrightBinding = '__playwright__binding__';
-
   readonly name: string;
   readonly playwrightFunction: frames.FunctionWithSource;
-  readonly initScript: InitScript;
   readonly needsHandle: boolean;
   readonly internal: boolean;
 
   constructor(name: string, playwrightFunction: frames.FunctionWithSource, needsHandle: boolean) {
     this.name = name;
     this.playwrightFunction = playwrightFunction;
-    this.initScript = new InitScript(`(${addPageBinding.toString()})(${JSON.stringify(PageBinding.kPlaywrightBinding)}, ${JSON.stringify(name)}, ${needsHandle}, (${source})())`, true /* internal */);
+    this.source = `(${addPageBinding.toString()})(${JSON.stringify(name)}, ${needsHandle}, (${source})())`;
     this.needsHandle = needsHandle;
-    this.internal = name.startsWith('__pw');
   }
 
   static async dispatch(page: Page, payload: string, context: dom.FrameExecutionContext) {
@@ -916,10 +927,13 @@
       callbacks.delete(arg.seq);
     }
   }
+
+  readonly source: string;
 }
 
-function addPageBinding(playwrightBinding: string, bindingName: string, needsHandle: boolean, utilityScriptSerializers: ReturnType<typeof source>) {
-  const binding = (globalThis as any)[playwrightBinding];
+function addPageBinding(bindingName: string, needsHandle: boolean, utilityScriptSerializers: ReturnType<typeof source>) {
+  const binding = (globalThis as any)[bindingName];
+  if (binding && binding.toString().startsWith("(...args) => {")) return
   (globalThis as any)[bindingName] = (...args: any[]) => {
     const me = (globalThis as any)[bindingName];
     if (needsHandle && args.slice(1).some(arg => arg !== undefined))
@@ -953,7 +967,6 @@
     binding(JSON.stringify(payload));
     return promise;
   };
-  (globalThis as any)[bindingName].__installed = true;
 }
 
 export class InitScript {
@@ -963,14 +976,7 @@
 
   constructor(source: string, internal?: boolean, name?: string) {
     const guid = createGuid();
-    this.source = `(() => {
-      globalThis.__pwInitScripts = globalThis.__pwInitScripts || {};
-      const hasInitScript = globalThis.__pwInitScripts[${JSON.stringify(guid)}];
-      if (hasInitScript)
-        return;
-      globalThis.__pwInitScripts[${JSON.stringify(guid)}] = true;
-      ${source}
-    })();`;
+    this.source = `(() => { ${source} })();`;
     this.internal = !!internal;
     this.name = name;
   }
diff -ruN playwright/packages/playwright-core/src/server/webkit/wkPage.ts patchright/packages/playwright-core/src/server/webkit/wkPage.ts
--- playwright/packages/playwright-core/src/server/webkit/wkPage.ts	2025-06-14 21:50:46.302103100 +0200
+++ patchright/packages/playwright-core/src/server/webkit/wkPage.ts	2025-06-14 21:53:22.284915200 +0200
@@ -768,7 +768,7 @@
     await this._updateBootstrapScript();
   }
 
-  async removeNonInternalInitScripts() {
+  async removeInitScripts() {
     await this._updateBootstrapScript();
   }
 
diff -ruN playwright/packages/protocol/src/protocol.yml patchright/packages/protocol/src/protocol.yml
--- playwright/packages/protocol/src/protocol.yml	2025-06-14 21:50:45.787741400 +0200
+++ patchright/packages/protocol/src/protocol.yml	2025-06-14 21:53:22.726413400 +0200
@@ -1,17 +1,3 @@
-# Copyright (c) Microsoft Corporation.
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-# http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-
 StackFrame:
   type: object
   properties:
@@ -19,9 +5,6 @@
     line: number
     column: number
     function: string?
-
-# This object can be send with any rpc call in the "metadata" field.
-
 Metadata:
   type: object
   properties:
@@ -33,9 +16,7 @@
         column: number?
     apiName: string?
     internal: boolean?
-    # Test runner step id.
     stepId: string?
-
 ClientSideCallMetadata:
   type: object
   properties:
@@ -43,14 +24,11 @@
     stack:
       type: array?
       items: StackFrame
-
 Point:
   type: object
   properties:
     x: number
     y: number
-
-
 Rect:
   type: object
   properties:
@@ -58,11 +36,8 @@
     y: number
     width: number
     height: number
-
-
 SerializedValue:
   type: object
-  # Exactly one of the properties must be present.
   properties:
     n: number?
     b: boolean?
@@ -70,26 +45,21 @@
     v:
       type: enum?
       literals:
-      - null
-      - undefined
-      - NaN
-      - Infinity
-      - -Infinity
-      - "-0"
-    # String representation of the Date.
+        - null
+        - undefined
+        - NaN
+        - Infinity
+        - -Infinity
+        - "-0"
     d: string?
-    # String representation of the URL.
     u: string?
-    # String representation of BigInt.
     bi: string?
-    # Serialized Error object.
     e:
       type: object?
       properties:
         m: string
         n: string
         s: string
-    # Regular expression pattern and flags.
     r:
       type: object?
       properties:
@@ -98,7 +68,6 @@
     a:
       type: array?
       items: SerializedValue
-    # Object with keys and values.
     o:
       type: array?
       items:
@@ -106,15 +75,9 @@
         properties:
           k: string
           v: SerializedValue
-    # An index in the handles array from SerializedArgument.
     h: number?
-    # Index of the object in value-type for circular reference resolution.
     id: number?
-    # Ref to the object in value-type for circular reference resolution.
     ref: number?
-
-
-# Represents a value with handle references.
 SerializedArgument:
   type: object
   properties:
@@ -122,8 +85,6 @@
     handles:
       type: array
       items: Channel
-
-
 ExpectedTextValue:
   type: object
   properties:
@@ -133,8 +94,6 @@
     matchSubstring: boolean?
     ignoreCase: boolean?
     normalizeWhiteSpace: boolean?
-
-
 AXNode:
   type: object
   properties:
@@ -158,15 +117,15 @@
     checked:
       type: enum?
       literals:
-      - checked
-      - unchecked
-      - mixed
+        - checked
+        - unchecked
+        - mixed
     pressed:
       type: enum?
       literals:
-      - pressed
-      - released
-      - mixed
+        - pressed
+        - released
+        - mixed
     level: number?
     valuemin: number?
     valuemax: number?
@@ -177,8 +136,6 @@
     children:
       type: array?
       items: AXNode
-
-
 SetNetworkCookie:
   type: object
   properties:
@@ -193,11 +150,9 @@
     sameSite:
       type: enum?
       literals:
-      - Strict
-      - Lax
-      - None
-
-
+        - Strict
+        - Lax
+        - None
 NetworkCookie:
   type: object
   properties:
@@ -211,17 +166,14 @@
     sameSite:
       type: enum
       literals:
-      - Strict
-      - Lax
-      - None
-
-
+        - Strict
+        - Lax
+        - None
 NameValue:
   type: object
   properties:
     name: string
     value: string
-
 IndexedDBDatabase:
   type: object
   properties:
@@ -259,7 +211,6 @@
                   items: string
                 multiEntry: boolean
                 unique: boolean
-
 SetOriginStorage:
   type: object
   properties:
@@ -270,7 +221,6 @@
     indexedDB:
       type: array?
       items: IndexedDBDatabase
-
 OriginStorage:
   type: object
   properties:
@@ -281,7 +231,6 @@
     indexedDB:
       type: array?
       items: IndexedDBDatabase
-
 SerializedError:
   type: object
   properties:
@@ -292,8 +241,6 @@
         name: string
         stack: string?
     value: SerializedValue?
-
-
 RecordHarOptions:
   type: object
   properties:
@@ -301,19 +248,17 @@
     content:
       type: enum?
       literals:
-      - embed
-      - attach
-      - omit
+        - embed
+        - attach
+        - omit
     mode:
       type: enum?
       literals:
-      - full
-      - minimal
+        - full
+        - minimal
     urlGlob: string?
     urlRegexSource: string?
     urlRegexFlags: string?
-
-
 FormField:
   type: object
   properties:
@@ -325,15 +270,11 @@
         name: string
         mimeType: string?
         buffer: binary
-
 APIRequestContext:
   type: interface
-
   initializer:
     tracing: Tracing
-
   commands:
-
     fetch:
       parameters:
         url: string
@@ -360,13 +301,11 @@
         maxRetries: number?
       returns:
         response: APIResponse
-
     fetchResponseBody:
       parameters:
         fetchUid: string
       returns:
         binary: binary?
-
     fetchLog:
       parameters:
         fetchUid: string
@@ -374,7 +313,6 @@
         log:
           type: array
           items: string
-
     storageState:
       parameters:
         indexedDB: boolean?
@@ -385,16 +323,12 @@
         origins:
           type: array
           items: OriginStorage
-
     disposeAPIResponse:
       parameters:
         fetchUid: string
-
     dispose:
       parameters:
         reason: string?
-
-
 APIResponse:
   type: object
   properties:
@@ -405,16 +339,13 @@
     headers:
       type: array
       items: NameValue
-
-
 LifecycleEvent:
   type: enum
   literals:
-  - load
-  - domcontentloaded
-  - networkidle
-  - commit
-
+    - load
+    - domcontentloaded
+    - networkidle
+    - commit
 CommonScreenshotOptions:
   type: mixin
   properties:
@@ -422,18 +353,18 @@
     caret:
       type: enum?
       literals:
-      - hide
-      - initial
+        - hide
+        - initial
     animations:
       type: enum?
       literals:
-      - disabled
-      - allow
+        - disabled
+        - allow
     scale:
       type: enum?
       literals:
-      - css
-      - device
+        - css
+        - device
     mask:
       type: array?
       items:
@@ -443,7 +374,6 @@
           selector: string
     maskColor: string?
     style: string?
-
 LaunchOptions:
   type: mixin
   properties:
@@ -476,8 +406,6 @@
     tracesDir: string?
     chromiumSandbox: boolean?
     firefoxUserPrefs: json?
-
-
 ContextOptions:
   type: mixin
   properties:
@@ -530,42 +458,42 @@
         send:
           type: enum?
           literals:
-          - always
-          - unauthorized
+            - always
+            - unauthorized
     deviceScaleFactor: number?
     isMobile: boolean?
     hasTouch: boolean?
     colorScheme:
       type: enum?
       literals:
-      - dark
-      - light
-      - no-preference
-      - no-override
+        - dark
+        - light
+        - no-preference
+        - no-override
     reducedMotion:
       type: enum?
       literals:
-      - reduce
-      - no-preference
-      - no-override
+        - reduce
+        - no-preference
+        - no-override
     forcedColors:
       type: enum?
       literals:
-      - active
-      - none
-      - no-override
+        - active
+        - none
+        - no-override
     acceptDownloads:
       type: enum?
       literals:
-      - accept
-      - deny
-      - internal-browser-default
+        - accept
+        - deny
+        - internal-browser-default
     contrast:
       type: enum?
       literals:
-      - no-preference
-      - more
-      - no-override
+        - no-preference
+        - more
+        - no-override
     baseURL: string?
     recordVideo:
       type: object?
@@ -581,12 +509,10 @@
     serviceWorkers:
       type: enum?
       literals:
-      - allow
-      - block
-
+        - allow
+        - block
 LocalUtils:
   type: interface
-
   initializer:
     deviceDescriptors:
       type: array
@@ -614,12 +540,10 @@
               defaultBrowserType:
                 type: enum
                 literals:
-                - chromium
-                - firefox
-                - webkit
-
+                  - chromium
+                  - firefox
+                  - webkit
   commands:
-
     zip:
       parameters:
         zipFile: string
@@ -633,14 +557,12 @@
             - write
             - append
         includeSources: boolean
-
     harOpen:
       parameters:
         file: string
       returns:
         harId: string?
         error: string?
-
     harLookup:
       parameters:
         harId: string
@@ -655,10 +577,10 @@
         action:
           type: enum
           literals:
-          - error
-          - redirect
-          - fulfill
-          - noentry
+            - error
+            - redirect
+            - fulfill
+            - noentry
         message: string?
         redirectURL: string?
         status: number?
@@ -666,16 +588,13 @@
           type: array?
           items: NameValue
         body: binary?
-
     harClose:
       parameters:
         harId: string
-
     harUnzip:
       parameters:
         zipFile: string
         harFile: string
-
     connect:
       parameters:
         wsEndpoint: string
@@ -689,42 +608,34 @@
         headers:
           type: array
           items: NameValue
-
     tracingStarted:
       parameters:
         tracesDir: string?
         traceName: string
       returns:
         stacksId: string
-
     addStackToTracingNoReply:
       parameters:
         callData: ClientSideCallMetadata
-
     traceDiscarded:
       parameters:
         stacksId: string
-
 Root:
   type: interface
-
   commands:
-
     initialize:
       parameters:
         sdkLanguage:
           type: enum
           literals:
-          - javascript
-          - python
-          - java
-          - csharp
+            - javascript
+            - python
+            - java
+            - csharp
       returns:
         playwright: Playwright
-
 Playwright:
   type: interface
-
   initializer:
     chromium: BrowserType
     firefox: BrowserType
@@ -735,13 +646,9 @@
     electron: Electron
     utils: LocalUtils?
     selectors: Selectors
-    # Only present when connecting remotely via BrowserType.connect() method.
     preLaunchedBrowser: Browser?
-    # Only present when connecting remotely via Android.connect() method.
     preConnectedAndroidDevice: AndroidDevice?
-    # Only present when socks proxy is supported.
     socksSupport: SocksSupport?
-
   commands:
     newRequest:
       parameters:
@@ -771,8 +678,8 @@
             send:
               type: enum?
               literals:
-              - always
-              - unauthorized
+                - always
+                - unauthorized
         proxy:
           type: object?
           properties:
@@ -791,10 +698,8 @@
               type: array?
               items: SetOriginStorage
         tracesDir: string?
-
       returns:
         request: APIRequestContext
-
 RecorderSource:
   type: object
   properties:
@@ -812,10 +717,8 @@
           type: string
     revealLine: number?
     group: string?
-
 DebugController:
   type: interface
-
   commands:
     initialize:
       parameters:
@@ -823,21 +726,17 @@
         sdkLanguage:
           type: enum
           literals:
-          - javascript
-          - python
-          - java
-          - csharp
-
+            - javascript
+            - python
+            - java
+            - csharp
     setReportStateChanged:
       parameters:
         enabled: boolean
-
-    resetForReuse:
-
+    resetForReuse: null
     navigate:
       parameters:
         url: string
-
     setRecorderMode:
       parameters:
         mode:
@@ -847,35 +746,26 @@
             - recording
             - none
         testIdAttributeName: string?
-
     highlight:
       parameters:
         selector: string?
         ariaTemplate: string?
-
-    hideHighlight:
-
-    resume:
-
-    kill:
-
-    closeAllBrowsers:
-
+    hideHighlight: null
+    resume: null
+    kill: null
+    closeAllBrowsers: null
   events:
     inspectRequested:
       parameters:
         selector: string
         locator: string
         ariaSnapshot: string
-
     setModeRequested:
       parameters:
         mode: string
-
     stateChanged:
       parameters:
         pageCount: number
-
     sourceChanged:
       parameters:
         text: string
@@ -884,87 +774,68 @@
         actions:
           type: array?
           items: string
-
     paused:
       parameters:
         paused: boolean
-
 SocksSupport:
   type: interface
-
   commands:
     socksConnected:
       parameters:
         uid: string
         host: string
         port: number
-
     socksFailed:
       parameters:
         uid: string
         errorCode: string
-
     socksData:
       parameters:
         uid: string
         data: binary
-
     socksError:
       parameters:
         uid: string
         error: string
-
     socksEnd:
       parameters:
         uid: string
-
   events:
     socksRequested:
       parameters:
         uid: string
         host: string
         port: number
-
     socksData:
       parameters:
         uid: string
         data: binary
-
     socksClosed:
       parameters:
         uid: string
-
 Selectors:
   type: interface
-
   commands:
-
     register:
       parameters:
         name: string
         source: string
         contentScript: boolean?
-
     setTestIdAttributeName:
       parameters:
         testIdAttributeName: string
-
 BrowserType:
   type: interface
-
   initializer:
     executablePath: string
     name: string
-
   commands:
-
     launch:
       parameters:
         $mixin: LaunchOptions
         slowMo: number?
       returns:
         browser: Browser
-
     launchPersistentContext:
       parameters:
         $mixin1: LaunchOptions
@@ -973,7 +844,6 @@
         slowMo: number?
       returns:
         context: BrowserContext
-
     connectOverCDP:
       parameters:
         endpointURL: string
@@ -985,26 +855,19 @@
       returns:
         browser: Browser
         defaultContext: BrowserContext?
-
 Browser:
   type: interface
-
   initializer:
     version: string
     name: string
-
   commands:
-
     close:
       parameters:
         reason: string?
-
-    killForTests:
-
+    killForTests: null
     defaultUserAgentForTest:
       returns:
         userAgent: string
-
     newContext:
       parameters:
         $mixin: ContextOptions
@@ -1026,7 +889,6 @@
               items: SetOriginStorage
       returns:
         context: BrowserContext
-
     newContextForReuse:
       parameters:
         $mixin: ContextOptions
@@ -1048,15 +910,12 @@
               items: SetOriginStorage
       returns:
         context: BrowserContext
-
     stopPendingOperations:
       parameters:
         reason: string
-
     newBrowserCDPSession:
       returns:
         session: CDPSession
-
     startTracing:
       parameters:
         page: Page?
@@ -1064,16 +923,11 @@
         categories:
           type: array?
           items: string
-
     stopTracing:
       returns:
         artifact: Artifact
-
-
   events:
-
-    close:
-
+    close: null
 ConsoleMessage:
   type: mixin
   properties:
@@ -1088,11 +942,8 @@
         url: string
         lineNumber: number
         columnNumber: number
-
-
 EventTarget:
   type: interface
-
   commands:
     waitForEventInfo:
       parameters:
@@ -1103,37 +954,30 @@
             phase:
               type: enum
               literals:
-              - before
-              - after
-              - log
+                - before
+                - after
+                - log
             event: string?
             message: string?
             error: string?
       flags:
         snapshot: true
-
 BrowserContext:
   type: interface
-
   extends: EventTarget
-
   initializer:
     isChromium: boolean
     requestContext: APIRequestContext
     tracing: Tracing
-
   commands:
-
     addCookies:
       parameters:
         cookies:
           type: array
           items: SetNetworkCookie
-
     addInitScript:
       parameters:
         source: string
-
     clearCookies:
       parameters:
         name: string?
@@ -1145,13 +989,10 @@
         path: string?
         pathRegexSource: string?
         pathRegexFlags: string?
-
-    clearPermissions:
-
+    clearPermissions: null
     close:
       parameters:
         reason: string?
-
     cookies:
       parameters:
         urls:
@@ -1161,37 +1002,30 @@
         cookies:
           type: array
           items: NetworkCookie
-
     exposeBinding:
       parameters:
         name: string
         needsHandle: boolean?
-
     grantPermissions:
       parameters:
         permissions:
           type: array
           items: string
         origin: string?
-
     newPage:
       returns:
         page: Page
-
     setDefaultNavigationTimeoutNoReply:
       parameters:
         timeout: number?
-
     setDefaultTimeoutNoReply:
       parameters:
         timeout: number?
-
     setExtraHTTPHeaders:
       parameters:
         headers:
           type: array
           items: NameValue
-
     setGeolocation:
       parameters:
         geolocation:
@@ -1200,7 +1034,6 @@
             longitude: number
             latitude: number
             accuracy: number?
-
     setHTTPCredentials:
       parameters:
         httpCredentials:
@@ -1209,7 +1042,6 @@
             username: string
             password: string
             origin: string?
-
     setNetworkInterceptionPatterns:
       parameters:
         patterns:
@@ -1220,7 +1052,6 @@
               glob: string?
               regexSource: string?
               regexFlags: string?
-
     setWebSocketInterceptionPatterns:
       parameters:
         patterns:
@@ -1231,11 +1062,9 @@
               glob: string?
               regexSource: string?
               regexFlags: string?
-
     setOffline:
       parameters:
         offline: boolean
-
     storageState:
       parameters:
         indexedDB: boolean?
@@ -1246,19 +1075,17 @@
         origins:
           type: array
           items: OriginStorage
-
     pause:
-      experimental: True
-
+      experimental: true
     enableRecorder:
-      experimental: True
+      experimental: true
       parameters:
         language: string?
         mode:
           type: enum?
           literals:
-          - inspecting
-          - recording
+            - inspecting
+            - recording
         pauseOnNextStatement: boolean?
         testIdAttributeName: string?
         launchOptions: json?
@@ -1268,27 +1095,23 @@
         outputFile: string?
         handleSIGINT: boolean?
         omitCallTracking: boolean?
-
     newCDPSession:
       parameters:
         page: Page?
         frame: Frame?
       returns:
         session: CDPSession
-
     harStart:
       parameters:
         page: Page?
         options: RecordHarOptions
       returns:
         harId: string
-
     harExport:
       parameters:
         harId: string?
       returns:
         artifact: Artifact
-
     createTempFiles:
       parameters:
         rootDirName: string?
@@ -1304,127 +1127,100 @@
         writableStreams:
           type: array
           items: WritableStream
-
     updateSubscription:
       parameters:
         event:
           type: enum
           literals:
-          - console
-          - dialog
-          - request
-          - response
-          - requestFinished
-          - requestFailed
+            - console
+            - dialog
+            - request
+            - response
+            - requestFinished
+            - requestFailed
         enabled: boolean
-
     clockFastForward:
       parameters:
         ticksNumber: number?
         ticksString: string?
-
     clockInstall:
       parameters:
         timeNumber: number?
         timeString: string?
-
     clockPauseAt:
       parameters:
         timeNumber: number?
         timeString: string?
-
-    clockResume:
-
+    clockResume: null
     clockRunFor:
       parameters:
         ticksNumber: number?
         ticksString: string?
-
     clockSetFixedTime:
       parameters:
         timeNumber: number?
         timeString: string?
-
     clockSetSystemTime:
       parameters:
         timeNumber: number?
         timeString: string?
-
   events:
-
     bindingCall:
       parameters:
         binding: BindingCall
-
     console:
       parameters:
         $mixin: ConsoleMessage
         page: Page
-
-    close:
-
+    close: null
     dialog:
       parameters:
         dialog: Dialog
-
     page:
       parameters:
         page: Page
-
     pageError:
       parameters:
         error: SerializedError
         page: Page
-
     route:
       parameters:
         route: Route
-
     webSocketRoute:
       parameters:
         webSocketRoute: WebSocketRoute
-
     video:
       parameters:
         artifact: Artifact
-
     backgroundPage:
       parameters:
         page: Page
-
     serviceWorker:
       parameters:
         worker: Worker
-
     request:
       parameters:
         request: Request
         page: Page?
-
     requestFailed:
       parameters:
         request: Request
         failureText: string?
         responseEndTiming: number
         page: Page?
-
     requestFinished:
       parameters:
         request: Request
         response: Response?
         responseEndTiming: number
         page: Page?
-
     response:
       parameters:
         response: Response
         page: Page?
-
 Page:
   type: interface
-
   extends: EventTarget
-
   initializer:
     mainFrame: Frame
     viewportSize:
@@ -1434,67 +1230,59 @@
         height: number
     isClosed: boolean
     opener: Page?
-
   commands:
-
     setDefaultNavigationTimeoutNoReply:
       parameters:
         timeout: number?
-
     setDefaultTimeoutNoReply:
       parameters:
         timeout: number?
-
     addInitScript:
       parameters:
         source: string
-
     close:
       parameters:
         runBeforeUnload: boolean?
         reason: string?
-
     emulateMedia:
       parameters:
         media:
           type: enum?
           literals:
-          - screen
-          - print
-          - no-override
+            - screen
+            - print
+            - no-override
         colorScheme:
           type: enum?
           literals:
-          - dark
-          - light
-          - no-preference
-          - no-override
+            - dark
+            - light
+            - no-preference
+            - no-override
         reducedMotion:
           type: enum?
           literals:
-          - reduce
-          - no-preference
-          - no-override
+            - reduce
+            - no-preference
+            - no-override
         forcedColors:
           type: enum?
           literals:
-          - active
-          - none
-          - no-override
+            - active
+            - none
+            - no-override
         contrast:
           type: enum?
           literals:
-          - no-preference
-          - more
-          - no-override
+            - no-preference
+            - more
+            - no-override
       flags:
         snapshot: true
-
     exposeBinding:
       parameters:
         name: string
         needsHandle: boolean?
-
     goBack:
       parameters:
         timeout: number?
@@ -1504,7 +1292,6 @@
       flags:
         slowMo: true
         snapshot: true
-
     goForward:
       parameters:
         timeout: number?
@@ -1514,25 +1301,20 @@
       flags:
         slowMo: true
         snapshot: true
-
-    requestGC:
-
+    requestGC: null
     registerLocatorHandler:
       parameters:
         selector: string
         noWaitAfter: boolean?
       returns:
         uid: number
-
     resolveLocatorHandlerNoReply:
       parameters:
         uid: number
         remove: boolean?
-
     unregisterLocatorHandler:
       parameters:
         uid: number
-
     reload:
       parameters:
         timeout: number?
@@ -1542,7 +1324,6 @@
       flags:
         slowMo: true
         snapshot: true
-
     expectScreenshot:
       parameters:
         expected: binary?
@@ -1571,15 +1352,14 @@
           items: string
       flags:
         snapshot: true
-
     screenshot:
       parameters:
         timeout: number?
         type:
           type: enum?
           literals:
-          - png
-          - jpeg
+            - png
+            - jpeg
         quality: number?
         fullPage: boolean?
         clip: Rect?
@@ -1588,13 +1368,11 @@
         binary: binary
       flags:
         snapshot: true
-
     setExtraHTTPHeaders:
       parameters:
         headers:
           type: array
           items: NameValue
-
     setNetworkInterceptionPatterns:
       parameters:
         patterns:
@@ -1605,7 +1383,6 @@
               glob: string?
               regexSource: string?
               regexFlags: string?
-
     setWebSocketInterceptionPatterns:
       parameters:
         patterns:
@@ -1616,7 +1393,6 @@
               glob: string?
               regexSource: string?
               regexFlags: string?
-
     setViewportSize:
       parameters:
         viewportSize:
@@ -1626,28 +1402,24 @@
             height: number
       flags:
         snapshot: true
-
     keyboardDown:
       parameters:
         key: string
       flags:
         slowMo: true
         snapshot: true
-
     keyboardUp:
       parameters:
         key: string
       flags:
         slowMo: true
         snapshot: true
-
     keyboardInsertText:
       parameters:
         text: string
       flags:
         slowMo: true
         snapshot: true
-
     keyboardType:
       parameters:
         text: string
@@ -1655,7 +1427,6 @@
       flags:
         slowMo: true
         snapshot: true
-
     keyboardPress:
       parameters:
         key: string
@@ -1663,7 +1434,6 @@
       flags:
         slowMo: true
         snapshot: true
-
     mouseMove:
       parameters:
         x: number
@@ -1672,33 +1442,30 @@
       flags:
         slowMo: true
         snapshot: true
-
     mouseDown:
       parameters:
         button:
           type: enum?
           literals:
-          - left
-          - right
-          - middle
+            - left
+            - right
+            - middle
         clickCount: number?
       flags:
         slowMo: true
         snapshot: true
-
     mouseUp:
       parameters:
         button:
           type: enum?
           literals:
-          - left
-          - right
-          - middle
+            - left
+            - right
+            - middle
         clickCount: number?
       flags:
         slowMo: true
         snapshot: true
-
     mouseClick:
       parameters:
         x: number
@@ -1707,14 +1474,13 @@
         button:
           type: enum?
           literals:
-          - left
-          - right
-          - middle
+            - left
+            - right
+            - middle
         clickCount: number?
       flags:
         slowMo: true
         snapshot: true
-
     mouseWheel:
       parameters:
         deltaX: number
@@ -1722,7 +1488,6 @@
       flags:
         slowMo: true
         snapshot: true
-
     touchscreenTap:
       parameters:
         x: number
@@ -1730,7 +1495,6 @@
       flags:
         slowMo: true
         snapshot: true
-
     accessibilitySnapshot:
       parameters:
         interestingOnly: boolean?
@@ -1739,7 +1503,6 @@
         rootAXNode: AXNode?
       flags:
         snapshot: true
-
     pdf:
       parameters:
         scale: number?
@@ -1764,12 +1527,10 @@
         outline: boolean?
       returns:
         pdf: binary
-
     startJSCoverage:
       parameters:
         resetOnNavigation: boolean?
         reportAnonymousScripts: boolean?
-
     stopJSCoverage:
       returns:
         entries:
@@ -1795,11 +1556,9 @@
                           startOffset: number
                           endOffset: number
                           count: number
-
     startCSSCoverage:
       parameters:
         resetOnNavigation: boolean?
-
     stopCSSCoverage:
       returns:
         entries:
@@ -1816,81 +1575,61 @@
                   properties:
                     start: number
                     end: number
-
-    bringToFront:
-
+    bringToFront: null
     updateSubscription:
       parameters:
         event:
           type: enum
           literals:
-          - console
-          - dialog
-          - fileChooser
-          - request
-          - response
-          - requestFinished
-          - requestFailed
+            - console
+            - dialog
+            - fileChooser
+            - request
+            - response
+            - requestFinished
+            - requestFailed
         enabled: boolean
-
   events:
-
     bindingCall:
       parameters:
         binding: BindingCall
-
-    close:
-
-    crash:
-
+    close: null
+    crash: null
     download:
       parameters:
         url: string
         suggestedFilename: string
         artifact: Artifact
-
     fileChooser:
       parameters:
         element: ElementHandle
         isMultiple: boolean
-
     frameAttached:
       parameters:
         frame: Frame
-
     frameDetached:
       parameters:
         frame: Frame
-
     locatorHandlerTriggered:
       parameters:
         uid: number
-
     route:
       parameters:
         route: Route
-
     webSocketRoute:
       parameters:
         webSocketRoute: WebSocketRoute
-
     video:
       parameters:
         artifact: Artifact
-
     webSocket:
       parameters:
         webSocket: WebSocket
-
     worker:
       parameters:
         worker: Worker
-
-
-
 Frame:
   type: interface
-
   initializer:
     url: string
     name: string
@@ -1898,9 +1637,7 @@
     loadStates:
       type: array
       items: LifecycleEvent
-
   commands:
-
     evalOnSelector:
       parameters:
         selector: string
@@ -1912,7 +1649,6 @@
         value: SerializedValue
       flags:
         snapshot: true
-
     evalOnSelectorAll:
       parameters:
         selector: string
@@ -1923,7 +1659,6 @@
         value: SerializedValue
       flags:
         snapshot: true
-
     addScriptTag:
       parameters:
         url: string?
@@ -1933,7 +1668,6 @@
         element: ElementHandle
       flags:
         snapshot: true
-
     addStyleTag:
       parameters:
         url: string?
@@ -1942,7 +1676,6 @@
         element: ElementHandle
       flags:
         snapshot: true
-
     ariaSnapshot:
       parameters:
         selector: string
@@ -1950,14 +1683,13 @@
         mode:
           type: enum?
           literals:
-          - raw
-          - regex
+            - raw
+            - regex
         timeout: number?
       returns:
         snapshot: string
       flags:
         snapshot: true
-
     blur:
       parameters:
         selector: string
@@ -1966,7 +1698,6 @@
       flags:
         slowMo: true
         snapshot: true
-
     check:
       parameters:
         selector: string
@@ -1979,7 +1710,6 @@
         slowMo: true
         snapshot: true
         pausesBeforeInput: true
-
     click:
       parameters:
         selector: string
@@ -1991,19 +1721,19 @@
           items:
             type: enum
             literals:
-            - Alt
-            - Control
-            - ControlOrMeta
-            - Meta
-            - Shift
+              - Alt
+              - Control
+              - ControlOrMeta
+              - Meta
+              - Shift
         position: Point?
         delay: number?
         button:
           type: enum?
           literals:
-          - left
-          - right
-          - middle
+            - left
+            - right
+            - middle
         clickCount: number?
         timeout: number?
         trial: boolean?
@@ -2011,13 +1741,11 @@
         slowMo: true
         snapshot: true
         pausesBeforeInput: true
-
     content:
       returns:
         value: string
       flags:
         snapshot: true
-
     dragAndDrop:
       parameters:
         source: string
@@ -2032,7 +1760,6 @@
         slowMo: true
         snapshot: true
         pausesBeforeInput: true
-
     dblclick:
       parameters:
         selector: string
@@ -2043,26 +1770,25 @@
           items:
             type: enum
             literals:
-            - Alt
-            - Control
-            - ControlOrMeta
-            - Meta
-            - Shift
+              - Alt
+              - Control
+              - ControlOrMeta
+              - Meta
+              - Shift
         position: Point?
         delay: number?
         button:
           type: enum?
           literals:
-          - left
-          - right
-          - middle
+            - left
+            - right
+            - middle
         timeout: number?
         trial: boolean?
       flags:
         slowMo: true
         snapshot: true
         pausesBeforeInput: true
-
     dispatchEvent:
       parameters:
         selector: string
@@ -2073,27 +1799,26 @@
       flags:
         slowMo: true
         snapshot: true
-
     evaluateExpression:
       parameters:
         expression: string
         isFunction: boolean?
         arg: SerializedArgument
+        isolatedContext: boolean?
       returns:
         value: SerializedValue
       flags:
         snapshot: true
-
     evaluateExpressionHandle:
       parameters:
         expression: string
         isFunction: boolean?
         arg: SerializedArgument
+        isolatedContext: boolean?
       returns:
         handle: JSHandle
       flags:
         snapshot: true
-
     fill:
       parameters:
         selector: string
@@ -2105,7 +1830,6 @@
         slowMo: true
         snapshot: true
         pausesBeforeInput: true
-
     focus:
       parameters:
         selector: string
@@ -2114,15 +1838,12 @@
       flags:
         slowMo: true
         snapshot: true
-
     frameElement:
       returns:
         element: ElementHandle
-
     highlight:
       parameters:
         selector: string
-
     getAttribute:
       parameters:
         selector: string
@@ -2133,7 +1854,6 @@
         value: string?
       flags:
         snapshot: true
-
     goto:
       parameters:
         url: string
@@ -2145,7 +1865,6 @@
       flags:
         slowMo: true
         snapshot: true
-
     hover:
       parameters:
         selector: string
@@ -2156,11 +1875,11 @@
           items:
             type: enum
             literals:
-            - Alt
-            - Control
-            - ControlOrMeta
-            - Meta
-            - Shift
+              - Alt
+              - Control
+              - ControlOrMeta
+              - Meta
+              - Shift
         position: Point?
         timeout: number?
         trial: boolean?
@@ -2168,7 +1887,6 @@
         slowMo: true
         snapshot: true
         pausesBeforeInput: true
-
     innerHTML:
       parameters:
         selector: string
@@ -2178,7 +1896,6 @@
         value: string
       flags:
         snapshot: true
-
     innerText:
       parameters:
         selector: string
@@ -2188,7 +1905,6 @@
         value: string
       flags:
         snapshot: true
-
     inputValue:
       parameters:
         selector: string
@@ -2198,7 +1914,6 @@
         value: string
       flags:
         snapshot: true
-
     isChecked:
       parameters:
         selector: string
@@ -2208,7 +1923,6 @@
         value: boolean
       flags:
         snapshot: true
-
     isDisabled:
       parameters:
         selector: string
@@ -2218,7 +1932,6 @@
         value: boolean
       flags:
         snapshot: true
-
     isEnabled:
       parameters:
         selector: string
@@ -2228,7 +1941,6 @@
         value: boolean
       flags:
         snapshot: true
-
     isHidden:
       parameters:
         selector: string
@@ -2237,7 +1949,6 @@
         value: boolean
       flags:
         snapshot: true
-
     isVisible:
       parameters:
         selector: string
@@ -2246,7 +1957,6 @@
         value: boolean
       flags:
         snapshot: true
-
     isEditable:
       parameters:
         selector: string
@@ -2256,7 +1966,6 @@
         value: boolean
       flags:
         snapshot: true
-
     press:
       parameters:
         selector: string
@@ -2269,7 +1978,6 @@
         slowMo: true
         snapshot: true
         pausesBeforeInput: true
-
     querySelector:
       parameters:
         selector: string
@@ -2278,7 +1986,6 @@
         element: ElementHandle?
       flags:
         snapshot: true
-
     querySelectorAll:
       parameters:
         selector: string
@@ -2288,7 +1995,6 @@
           items: ElementHandle
       flags:
         snapshot: true
-
     queryCount:
       parameters:
         selector: string
@@ -2296,7 +2002,6 @@
         value: number
       flags:
         snapshot: true
-
     selectOption:
       parameters:
         selector: string
@@ -2323,7 +2028,6 @@
         slowMo: true
         snapshot: true
         pausesBeforeInput: true
-
     setContent:
       parameters:
         html: string
@@ -2331,12 +2035,10 @@
         waitUntil: LifecycleEvent?
       flags:
         snapshot: true
-
     setInputFiles:
       parameters:
         selector: string
         strict: boolean?
-        # Only one of payloads, localPaths and streams should be present.
         payloads:
           type: array?
           items:
@@ -2358,7 +2060,6 @@
         slowMo: true
         snapshot: true
         pausesBeforeInput: true
-
     tap:
       parameters:
         selector: string
@@ -2369,11 +2070,11 @@
           items:
             type: enum
             literals:
-            - Alt
-            - Control
-            - ControlOrMeta
-            - Meta
-            - Shift
+              - Alt
+              - Control
+              - ControlOrMeta
+              - Meta
+              - Shift
         position: Point?
         timeout: number?
         trial: boolean?
@@ -2381,7 +2082,6 @@
         slowMo: true
         snapshot: true
         pausesBeforeInput: true
-
     textContent:
       parameters:
         selector: string
@@ -2391,11 +2091,9 @@
         value: string?
       flags:
         snapshot: true
-
     title:
       returns:
         value: string
-
     type:
       parameters:
         selector: string
@@ -2407,7 +2105,6 @@
         slowMo: true
         snapshot: true
         pausesBeforeInput: true
-
     uncheck:
       parameters:
         selector: string
@@ -2420,26 +2117,22 @@
         slowMo: true
         snapshot: true
         pausesBeforeInput: true
-
     waitForTimeout:
       parameters:
         timeout: number
       flags:
         snapshot: true
-
     waitForFunction:
       parameters:
         expression: string
         isFunction: boolean?
         arg: SerializedArgument
         timeout: number?
-        # When present, polls on interval. Otherwise, polls on raf.
         pollingInterval: number?
       returns:
         handle: JSHandle
       flags:
         snapshot: true
-
     waitForSelector:
       parameters:
         selector: string
@@ -2448,16 +2141,15 @@
         state:
           type: enum?
           literals:
-          - attached
-          - detached
-          - visible
-          - hidden
+            - attached
+            - detached
+            - visible
+            - hidden
         omitReturnValue: boolean?
       returns:
         element: ElementHandle?
       flags:
         snapshot: true
-
     expect:
       parameters:
         selector: string
@@ -2480,14 +2172,11 @@
           items: string
       flags:
         snapshot: true
-
   events:
-
     loadstate:
       parameters:
         add: LifecycleEvent?
         remove: LifecycleEvent?
-
     navigated:
       parameters:
         url: string
@@ -2497,68 +2186,55 @@
           properties:
             request: Request?
         error: string?
-
-
-
 Worker:
   type: interface
-
   initializer:
     url: string
-
   commands:
-
     evaluateExpression:
       parameters:
         expression: string
         isFunction: boolean?
         arg: SerializedArgument
+        isolatedContext: boolean?
       returns:
         value: SerializedValue
-
     evaluateExpressionHandle:
       parameters:
         expression: string
         isFunction: boolean?
         arg: SerializedArgument
+        isolatedContext: boolean?
       returns:
         handle: JSHandle
-
   events:
-
-    close:
-
-
+    close: null
 JSHandle:
   type: interface
-
   initializer:
     preview: string
-
   commands:
-
-    dispose:
-
+    dispose: null
     evaluateExpression:
       parameters:
         expression: string
         isFunction: boolean?
         arg: SerializedArgument
+        isolatedContext: boolean?
       returns:
         value: SerializedValue
       flags:
         snapshot: true
-
     evaluateExpressionHandle:
       parameters:
         expression: string
         isFunction: boolean?
         arg: SerializedArgument
+        isolatedContext: boolean?
       returns:
         handle: JSHandle
       flags:
         snapshot: true
-
     getPropertyList:
       returns:
         properties:
@@ -2568,32 +2244,22 @@
             properties:
               name: string
               value: JSHandle
-
     getProperty:
       parameters:
         name: string
       returns:
         handle: JSHandle
-
     jsonValue:
       returns:
         value: SerializedValue
-
   events:
-
     previewUpdated:
       parameters:
         preview: string
-
-
-
 ElementHandle:
   type: interface
-
   extends: JSHandle
-
   commands:
-
     evalOnSelector:
       parameters:
         selector: string
@@ -2605,7 +2271,6 @@
         value: SerializedValue
       flags:
         snapshot: true
-
     evalOnSelectorAll:
       parameters:
         selector: string
@@ -2616,13 +2281,11 @@
         value: SerializedValue
       flags:
         snapshot: true
-
     boundingBox:
       returns:
         value: Rect?
       flags:
         snapshot: true
-
     check:
       parameters:
         force: boolean?
@@ -2633,7 +2296,6 @@
         slowMo: true
         snapshot: true
         pausesBeforeInput: true
-
     click:
       parameters:
         force: boolean?
@@ -2643,19 +2305,19 @@
           items:
             type: enum
             literals:
-            - Alt
-            - Control
-            - ControlOrMeta
-            - Meta
-            - Shift
+              - Alt
+              - Control
+              - ControlOrMeta
+              - Meta
+              - Shift
         position: Point?
         delay: number?
         button:
           type: enum?
           literals:
-          - left
-          - right
-          - middle
+            - left
+            - right
+            - middle
         clickCount: number?
         timeout: number?
         trial: boolean?
@@ -2663,13 +2325,11 @@
         slowMo: true
         snapshot: true
         pausesBeforeInput: true
-
     contentFrame:
       returns:
         frame: Frame?
       flags:
         snapshot: true
-
     dblclick:
       parameters:
         force: boolean?
@@ -2678,26 +2338,25 @@
           items:
             type: enum
             literals:
-            - Alt
-            - Control
-            - ControlOrMeta
-            - Meta
-            - Shift
+              - Alt
+              - Control
+              - ControlOrMeta
+              - Meta
+              - Shift
         position: Point?
         delay: number?
         button:
           type: enum?
           literals:
-          - left
-          - right
-          - middle
+            - left
+            - right
+            - middle
         timeout: number?
         trial: boolean?
       flags:
         slowMo: true
         snapshot: true
         pausesBeforeInput: true
-
     dispatchEvent:
       parameters:
         type: string
@@ -2705,7 +2364,6 @@
       flags:
         slowMo: true
         snapshot: true
-
     fill:
       parameters:
         value: string
@@ -2715,22 +2373,18 @@
         slowMo: true
         snapshot: true
         pausesBeforeInput: true
-
     focus:
       flags:
         slowMo: true
         snapshot: true
-
     generateLocatorString:
       returns:
         value: string?
-
     getAttribute:
       parameters:
         name: string
       returns:
         value: string?
-
     hover:
       parameters:
         force: boolean?
@@ -2739,11 +2393,11 @@
           items:
             type: enum
             literals:
-            - Alt
-            - Control
-            - ControlOrMeta
-            - Meta
-            - Shift
+              - Alt
+              - Control
+              - ControlOrMeta
+              - Meta
+              - Shift
         position: Point?
         timeout: number?
         trial: boolean?
@@ -2751,65 +2405,54 @@
         slowMo: true
         snapshot: true
         pausesBeforeInput: true
-
     innerHTML:
       returns:
         value: string
       flags:
         snapshot: true
-
     innerText:
       returns:
         value: string
       flags:
         snapshot: true
-
     inputValue:
       returns:
         value: string
       flags:
         snapshot: true
-
     isChecked:
       returns:
         value: boolean
       flags:
         snapshot: true
-
     isDisabled:
       returns:
         value: boolean
       flags:
         snapshot: true
-
     isEditable:
       returns:
         value: boolean
       flags:
         snapshot: true
-
     isEnabled:
       returns:
         value: boolean
       flags:
         snapshot: true
-
     isHidden:
       returns:
         value: boolean
       flags:
         snapshot: true
-
     isVisible:
       returns:
         value: boolean
       flags:
         snapshot: true
-
     ownerFrame:
       returns:
         frame: Frame?
-
     press:
       parameters:
         key: string
@@ -2820,7 +2463,6 @@
         slowMo: true
         snapshot: true
         pausesBeforeInput: true
-
     querySelector:
       parameters:
         selector: string
@@ -2829,7 +2471,6 @@
         element: ElementHandle?
       flags:
         snapshot: true
-
     querySelectorAll:
       parameters:
         selector: string
@@ -2839,29 +2480,26 @@
           items: ElementHandle
       flags:
         snapshot: true
-
     screenshot:
       parameters:
         timeout: number?
         type:
           type: enum?
           literals:
-          - png
-          - jpeg
+            - png
+            - jpeg
         quality: number?
         $mixin: CommonScreenshotOptions
       returns:
         binary: binary
       flags:
         snapshot: true
-
     scrollIntoViewIfNeeded:
       parameters:
         timeout: number?
       flags:
         slowMo: true
         snapshot: true
-
     selectOption:
       parameters:
         elements:
@@ -2886,7 +2524,6 @@
         slowMo: true
         snapshot: true
         pausesBeforeInput: true
-
     selectText:
       parameters:
         force: boolean?
@@ -2894,10 +2531,8 @@
       flags:
         slowMo: true
         snapshot: true
-
     setInputFiles:
       parameters:
-        # Only one of payloads, localPaths and streams should be present.
         payloads:
           type: array?
           items:
@@ -2919,7 +2554,6 @@
         slowMo: true
         snapshot: true
         pausesBeforeInput: true
-
     tap:
       parameters:
         force: boolean?
@@ -2928,11 +2562,11 @@
           items:
             type: enum
             literals:
-            - Alt
-            - Control
-            - ControlOrMeta
-            - Meta
-            - Shift
+              - Alt
+              - Control
+              - ControlOrMeta
+              - Meta
+              - Shift
         position: Point?
         timeout: number?
         trial: boolean?
@@ -2940,13 +2574,11 @@
         slowMo: true
         snapshot: true
         pausesBeforeInput: true
-
     textContent:
       returns:
         value: string?
       flags:
         snapshot: true
-
     type:
       parameters:
         text: string
@@ -2956,7 +2588,6 @@
         slowMo: true
         snapshot: true
         pausesBeforeInput: true
-
     uncheck:
       parameters:
         force: boolean?
@@ -2967,22 +2598,20 @@
         slowMo: true
         snapshot: true
         pausesBeforeInput: true
-
     waitForElementState:
       parameters:
         state:
           type: enum
           literals:
-          - visible
-          - hidden
-          - stable
-          - enabled
-          - disabled
-          - editable
+            - visible
+            - hidden
+            - stable
+            - enabled
+            - disabled
+            - editable
         timeout: number?
       flags:
         snapshot: true
-
     waitForSelector:
       parameters:
         selector: string
@@ -2991,19 +2620,16 @@
         state:
           type: enum?
           literals:
-          - attached
-          - detached
-          - visible
-          - hidden
+            - attached
+            - detached
+            - visible
+            - hidden
       returns:
         element: ElementHandle?
       flags:
         snapshot: true
-
-
 Request:
   type: interface
-
   initializer:
     frame: Frame?
     serviceWorker: Worker?
@@ -3016,36 +2642,26 @@
       items: NameValue
     isNavigationRequest: boolean
     redirectedFrom: Request?
-
   commands:
-
     response:
       returns:
         response: Response?
-
     rawRequestHeaders:
       returns:
         headers:
           type: array
           items: NameValue
-
-
 Route:
   type: interface
-
   initializer:
     request: Request
-
   commands:
-
     redirectNavigationRequest:
       parameters:
         url: string
-
     abort:
       parameters:
         errorCode: string?
-
     continue:
       parameters:
         url: string?
@@ -3055,10 +2671,8 @@
           items: NameValue
         postData: binary?
         isFallback: boolean
-
     fulfill:
       parameters:
-        # default is 200
         status: number?
         headers:
           type: array?
@@ -3066,67 +2680,50 @@
         body: string?
         isBase64: boolean?
         fetchResponseUid: string?
-
-
 WebSocketRoute:
   type: interface
-
   initializer:
     url: string
-
   commands:
-
-    connect:
-
-    ensureOpened:
-
+    connect: null
+    ensureOpened: null
     sendToPage:
       parameters:
         message: string
         isBase64: boolean
-
     sendToServer:
       parameters:
         message: string
         isBase64: boolean
-
     closePage:
       parameters:
         code: number?
         reason: string?
         wasClean: boolean
-
     closeServer:
       parameters:
         code: number?
         reason: string?
         wasClean: boolean
-
   events:
-
     messageFromPage:
       parameters:
         message: string
         isBase64: boolean
-
     messageFromServer:
       parameters:
         message: string
         isBase64: boolean
-
     closePage:
       parameters:
         code: number?
         reason: string?
         wasClean: boolean
-
     closeServer:
       parameters:
         code: number?
         reason: string?
         wasClean: boolean
-
-
 ResourceTiming:
   type: object
   properties:
@@ -3138,10 +2735,8 @@
     connectEnd: number
     requestStart: number
     responseStart: number
-
 Response:
   type: interface
-
   initializer:
     request: Request
     url: string
@@ -3152,33 +2747,24 @@
       items: NameValue
     timing: ResourceTiming
     fromServiceWorker: boolean
-
-
   commands:
-
     body:
       returns:
         binary: binary
-
     securityDetails:
       returns:
         value: SecurityDetails?
-
     serverAddr:
       returns:
         value: RemoteAddr?
-
     rawResponseHeaders:
       returns:
         headers:
           type: array
           items: NameValue
-
     sizes:
       returns:
         sizes: RequestSizes
-
-
 SecurityDetails:
   type: object
   properties:
@@ -3187,7 +2773,6 @@
     subjectName: string?
     validFrom: number?
     validTo: number?
-
 RequestSizes:
   type: object
   properties:
@@ -3195,46 +2780,32 @@
     requestHeadersSize: number
     responseBodySize: number
     responseHeadersSize: number
-
-
 RemoteAddr:
   type: object
   properties:
     ipAddress: string
     port: number
-
-
 WebSocket:
   type: interface
-
   extends: EventTarget
-
   initializer:
     url: string
-
   events:
-    open:
-
+    open: null
     frameSent:
       parameters:
         opcode: number
         data: string
-
     frameReceived:
       parameters:
         opcode: number
         data: string
-
     socketError:
       parameters:
         error: string
-
-    close:
-
-
+    close: null
 BindingCall:
   type: interface
-
   initializer:
     frame: Frame
     name: string
@@ -3242,56 +2813,40 @@
       type: array?
       items: SerializedValue
     handle: JSHandle?
-
   commands:
-
     reject:
       parameters:
         error: SerializedError
-
     resolve:
       parameters:
         result: SerializedArgument
-
-
-
 Dialog:
   type: interface
-
   initializer:
     page: Page?
     type: string
     message: string
     defaultValue: string
-
   commands:
-
     accept:
       parameters:
         promptText: string?
-
-    dismiss:
-
-
+    dismiss: null
 Tracing:
   type: interface
-
   commands:
-
     tracingStart:
       parameters:
         name: string?
         snapshots: boolean?
         screenshots: boolean?
         live: boolean?
-
     tracingStartChunk:
       parameters:
         name: string?
         title: string?
       returns:
         traceName: string
-
     tracingGroup:
       parameters:
         name: string
@@ -3301,117 +2856,77 @@
             file: string
             line: number?
             column: number?
-
-    tracingGroupEnd:
-
+    tracingGroupEnd: null
     tracingStopChunk:
       parameters:
         mode:
           type: enum
           literals:
-          - archive
-          - discard
-          - entries
+            - archive
+            - discard
+            - entries
       returns:
-        # The artifact may be missing if the browser closes while tracing is being stopped.
-        # Or it can be missing if client-side compression is taking place.
         artifact: Artifact?
-        # For local mode, these are all entries.
         entries:
           type: array?
           items: NameValue
-
-    tracingStop:
-
-
+    tracingStop: null
 Artifact:
   type: interface
-
   initializer:
     absolutePath: string
-
   commands:
-
     pathAfterFinished:
       returns:
         value: string
-
-    # Blocks path/failure/delete/context.close until saved to the local |path|.
     saveAs:
       parameters:
         path: string
-
-    # Blocks path/failure/delete/context.close until the stream is closed.
     saveAsStream:
       returns:
         stream: Stream
-
     failure:
       returns:
         error: string?
-
     stream:
       returns:
         stream: Stream
-
-    cancel:
-
-    delete:
-
-
+    cancel: null
+    delete: null
 Stream:
   type: interface
-
   commands:
-
     read:
       parameters:
         size: number?
       returns:
         binary: binary
-
-    close:
-
-
+    close: null
 WritableStream:
   type: interface
-
   commands:
-
     write:
       parameters:
         binary: binary
-
-    close:
-
-
+    close: null
 CDPSession:
   type: interface
-
   commands:
-
     send:
       parameters:
         method: string
         params: json?
       returns:
         result: json
-
-    detach:
-
+    detach: null
   events:
-
     event:
       parameters:
         method: string
         params: json?
-
-
 Electron:
   type: interface
-
   commands:
-
     launch:
       parameters:
         executablePath: string?
@@ -3426,17 +2941,17 @@
         acceptDownloads:
           type: enum?
           literals:
-          - accept
-          - deny
-          - internal-browser-default
+            - accept
+            - deny
+            - internal-browser-default
         bypassCSP: boolean?
         colorScheme:
           type: enum?
           literals:
-          - dark
-          - light
-          - no-preference
-          - no-override
+            - dark
+            - light
+            - no-preference
+            - no-override
         extraHTTPHeaders:
           type: array?
           items: NameValue
@@ -3468,27 +2983,19 @@
         strictSelectors: boolean?
         timezoneId: string?
         tracesDir: string?
-
       returns:
         electronApplication: ElectronApplication
-
-
 ElectronApplication:
   type: interface
-
   extends: EventTarget
-
   initializer:
     context: BrowserContext
-
   commands:
-
     browserWindow:
       parameters:
         page: Page
       returns:
         handle: JSHandle
-
     evaluateExpression:
       parameters:
         expression: string
@@ -3496,7 +3003,6 @@
         arg: SerializedArgument
       returns:
         value: SerializedValue
-
     evaluateExpressionHandle:
       parameters:
         expression: string
@@ -3504,26 +3010,21 @@
         arg: SerializedArgument
       returns:
         handle: JSHandle
-
     updateSubscription:
       parameters:
         event:
           type: enum
           literals:
-          - console
+            - console
         enabled: boolean
-
   events:
-    close:
+    close: null
     console:
       parameters:
         $mixin: ConsoleMessage
-
 Android:
   type: interface
-
   commands:
-
     devices:
       parameters:
         host: string?
@@ -3533,36 +3034,27 @@
         devices:
           type: array
           items: AndroidDevice
-
     setDefaultTimeoutNoReply:
       parameters:
         timeout: number
-
 AndroidSocket:
   type: interface
-
   commands:
     write:
       parameters:
         data: binary
-
-    close:
-
+    close: null
   events:
     data:
       parameters:
         data: binary
-    close:
-
+    close: null
 AndroidDevice:
   type: interface
-
   extends: EventTarget
-
   initializer:
     model: string
     serial: string
-
   commands:
     wait:
       parameters:
@@ -3570,123 +3062,106 @@
         state:
           type: enum?
           literals:
-          - gone
+            - gone
         timeout: number?
-
     fill:
       parameters:
         selector: AndroidSelector
         text: string
         timeout: number?
-
     tap:
       parameters:
         selector: AndroidSelector
         duration: number?
         timeout: number?
-
     drag:
       parameters:
         selector: AndroidSelector
         dest: Point
         speed: number?
         timeout: number?
-
     fling:
       parameters:
         selector: AndroidSelector
         direction:
           type: enum
           literals:
-          - up
-          - down
-          - left
-          - right
+            - up
+            - down
+            - left
+            - right
         speed: number?
         timeout: number?
-
     longTap:
       parameters:
         selector: AndroidSelector
         timeout: number?
-
     pinchClose:
       parameters:
         selector: AndroidSelector
         percent: number
         speed: number?
         timeout: number?
-
     pinchOpen:
       parameters:
         selector: AndroidSelector
         percent: number
         speed: number?
         timeout: number?
-
     scroll:
       parameters:
         selector: AndroidSelector
         direction:
           type: enum
           literals:
-          - up
-          - down
-          - left
-          - right
+            - up
+            - down
+            - left
+            - right
         percent: number
         speed: number?
         timeout: number?
-
     swipe:
       parameters:
         selector: AndroidSelector
         direction:
           type: enum
           literals:
-          - up
-          - down
-          - left
-          - right
+            - up
+            - down
+            - left
+            - right
         percent: number
         speed: number?
         timeout: number?
-
     info:
       parameters:
         selector: AndroidSelector
       returns:
         info: AndroidElementInfo
-
     screenshot:
       returns:
         binary: binary
-
     inputType:
       parameters:
         text: string
-
     inputPress:
       parameters:
         key: string
-
     inputTap:
       parameters:
         point: Point
-
     inputSwipe:
       parameters:
         segments:
           type: array
           items: Point
         steps: number
-
     inputDrag:
       parameters:
         from: Point
         to: Point
         steps: number
-
     launchBrowser:
       parameters:
         $mixin: ContextOptions
@@ -3701,67 +3176,52 @@
             bypass: string?
             username: string?
             password: string?
-
       returns:
         context: BrowserContext
-
     open:
       parameters:
         command: string
       returns:
         socket: AndroidSocket
-
     shell:
       parameters:
         command: string
       returns:
         result: binary
-
     installApk:
       parameters:
         file: binary
         args:
           type: array?
           items: string
-
     push:
       parameters:
         file: binary
         path: string
         mode: number?
-
     setDefaultTimeoutNoReply:
       parameters:
         timeout: number
-
     connectToWebView:
       parameters:
         socketName: string
       returns:
         context: BrowserContext
-
-    close:
-
+    close: null
   events:
-    close:
-
+    close: null
     webViewAdded:
       parameters:
         webView: AndroidWebView
-
     webViewRemoved:
       parameters:
         socketName: string
-
-
 AndroidWebView:
   type: object
   properties:
     pid: number
     pkg: string
     socketName: string
-
-
 AndroidSelector:
   type: object
   properties:
@@ -3789,8 +3249,6 @@
     scrollable: boolean?
     selected: boolean?
     text: string?
-
-
 AndroidElementInfo:
   type: object
   properties:
@@ -3812,24 +3270,17 @@
     longClickable: boolean
     scrollable: boolean
     selected: boolean
-
-
 JsonPipe:
   type: interface
-
   commands:
     send:
       parameters:
         message: json
-
-    close:
-
+    close: null
   events:
-
     message:
       parameters:
         message: json
-
     closed:
       parameters:
         reason: string?
